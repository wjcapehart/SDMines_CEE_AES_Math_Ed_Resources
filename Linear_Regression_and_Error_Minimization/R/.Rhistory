ylim = c(min(exceldata$Compressive.Strength,fitted.S_v_all),  # y-axis range
max(exceldata$Compressive.Strength,fitted.S_v_all)),
asp = 1                                                       # aspect ratio between
)                                                             #    x and y scales
# plot the linear regression line
abline(reg = linear_model.S_v_Sofall,  # put the regression output here
col = "red"                     # color it red
)
# and we can also plot a simple one:to:one line.
abline(a   = 0,     # y-intercept
b   = 1,     # slope
col = "grey" # color it grey
)
bias = mean(fitted.S_v_all0 - exceldata$Compressive.Strength)
# Now we can plot
plot(x    = exceldata$Cement,                          # x-values (the $ lets us reach into
y    = exceldata$Compressive.Strength,            # y-values     the data frame)
main = "Example of a Single Variable Regression", # main title string
xlab = "Cement (kg m-3 concrete)",                # x-labels
ylab = "28-dy Compressive Stren. (MPa)"           # y-labels
)
# plotting box plots
beanplot(  x = exceldata$Cement,                           # data to process
main = "Box Whisker Plot for Cement",           # main title string
ylab = expression('Cement Amount (kg m'^2*")"), # y axis label
col = "grey",                                  # color for shading
border = "black")                                 # color for borders
beanplot(  x = exceldata$Water,                         # data to process
main = "Box Whisker Plot for Water",            # main title string
ylab = expression('Water Amount (kg m'^2*")"),  # y axis label
col = "blue",                                  # color for shading
border = "black")                                 # color for borders
beanplot(  x = exceldata$Compressive.Strength,              # data to process
main = "Box Whisker Plot for Compressive Strength", # main title string
ylab = "Compressive Strength (MPa)",                # y axis label
col = "red",                                       # color for shading
border = "black")                                     # color for borders
bias = mean(fitted.S_v_all0 - exceldata$Compressive.Strength)
bias = mean(fitted.S_v_all - exceldata$Compressive.Strength)
print("BIAS")
print(bias)
rmse = sqrt(mean( (fitted.S_v_all - exceldata$Compressive.Strength)^2)  )
print("RMSE")
print(rmse)
r = cor(x = fitted.S_v_all,                 # the x-value
y = exceldata$Compressive.Strength, # the y-value
method = "pearson"                  # method of correlation
)
print("correlation coefficient")
print(r)
print("coefficient of determination")
print(r^2)
library(XLConnect) # Load the "Excel Connector for R" Library. (to load the spreadsheet data)
library(MASS)      # Load the "Modern Applied Statistics with S Library"" (for regressions)
library(plyr)      # Load the "Tools for Splitting, Applying and Combining Data" Library
library(e1071)     # Load the "Misc Functions of the Department of Statistics, Probability Theory Group" Library
library(beanplot)  # Load the "Visualization via Beanplots" Library
excel_file_name <- "/Users/wjc/Downloads/L20_Non_Linear_Regression_Sandbox.xlsx"
exceldata <- readWorksheetFromFile(file   = excel_file_name, # file name here
sheet  = "Concrete",      # select the Concrete Sheet
region = "A2:K105",       # chose the cells you need to import
header = TRUE             # TRUE if the first imported row is the Header
)
str(object = exceldata)
exceldata <- rename(x       = exceldata,             # data frame you want to patch
replace = c("SP" =               # the name you want to change
"Superplasticizer")  # the replacement name
)
exceldata <- rename(x       = exceldata,
replace = c("Fine.Aggr." =
"Fine.Aggregates")
)
exceldata <- rename(x       = exceldata,
replace = c("Coarse.Aggr." =
"Coarse.Aggregates")
)
exceldata <- rename(x       = exceldata,
replace = c("SLUMP.cm." =
"SLUMP")
)
exceldata <- rename(x       = exceldata,
replace = c("FLOW.cm." =
"FLOW")
)
exceldata <- rename(x       = exceldata,
replace = c("Compressive.Strength..28.day...Mpa." =
"Compressive.Strength")
)
exceldata
Cement_Stats  = data.frame(n                 = length(  x = exceldata$Cement), # start by loading up the
mean               = mean(    x = exceldata$Cement), # data_frame with values
standard_deviation = sd(      x = exceldata$Cement),
variance           = var(     x = exceldata$Cement),
skewness           = skewness(x = exceldata$Cement),
kurtosis           = kurtosis(x = exceldata$Cement),
row.names          = "Cement Amount") # row names make a label for the frame
Water_Stats  = data.frame(n                  = length(  x = exceldata$Water),
mean               = mean(    x = exceldata$Water),
standard_deviation = sd(      x = exceldata$Water),
variance           = var(     x = exceldata$Water),
skewness           = skewness(x = exceldata$Water),
kurtosis           = kurtosis(x = exceldata$Water),
row.names          = "Water Amount")
Strength_Stats= data.frame(n                  = length(  x = exceldata$Compressive.Strength),
mean               = mean(    x = exceldata$Compressive.Strength),
standard_deviation = sd(      x = exceldata$Compressive.Strength),
variance           = var(     x = exceldata$Compressive.Strength),
skewness           = skewness(x = exceldata$Compressive.Strength),
kurtosis           = kurtosis(x = exceldata$Compressive.Strength),
row.names          = "Compressive Strength")
confidence_level = 0.95
alpha            = 1.00 - confidence_level
# the old fashioned way...
Cement_Stats$confidence_limit.95  = qt(p  = 1-alpha/2 ,
df = Cement_Stats$n-1) *
Cement_Stats$standard_deviation /
sqrt(Cement_Stats$n)
Water_Stats$confidence_limit.95   = qt(p  = 1-alpha/2 ,
df = Cement_Stats$n-1) *
Water_Stats$standard_deviation /
sqrt(Water_Stats$n)
Strength_Stats$confidence_limit.95 = qt(p  = 1-alpha/2 ,
df = Strength_Stats$n-1) *
Strength_Stats$standard_deviation /
sqrt(Strength_Stats$n)
print(Cement_Stats)
print(Water_Stats)
print(Strength_Stats)
# plotting histograms
hist(x      = exceldata$Cement,                        # data to process
breaks = 10,                                      # # of intervals
main   = "Histogram for Cement Amount",           # main title string
xlab   = expression('Cement Amount (kg m'^2*")"), # this lets us use superscripts/subscripts
col    = "grey",                                  # color for shading
border = "black")                                 # border for shading
hist(x      = exceldata$Water,                        # data to process
breaks = 10,                                     # # of intervals
main   = "Histogram for Water Amount",           # main title string
xlab   = expression('Water Amount (kg m'^2*")"), # x axis label
col    = "blue",                                 # color for shading
border = "black")                                # border for shading
hist(x      = exceldata$Compressive.Strength,         # data to process
breaks = 10,                                     # # of intervals
main   = "Histogram for Compressional Strength", # main title string
xlab   = "Compressional Strength (MPa)",         # x axis label
col    = "red",                                  # color for shading
border = "black")                                # border for shading
# plotting box plots
boxplot(x = exceldata$Cement,                           # data to process
main = "Box Whisker Plot for Cement",           # main title string
ylab = expression('Cement Amount (kg m'^2*")"), # y axis label
col = "grey",                                  # color for shading
border = "black")                                 # color for borders
boxplot(   x = exceldata$Water,                         # data to process
main = "Box Whisker Plot for Water",            # main title string
ylab = expression('Water Amount (kg m'^2*")"),  # y axis label
col = "blue",                                  # color for shading
border = "black")                                 # color for borders
boxplot(   x = exceldata$Compressive.Strength,              # data to process
main = "Box Whisker Plot for Compressive Strength", # main title string
ylab = "Compressive Strength (MPa)",                # y axis label
col = "red",                                       # color for shading
border = "black")                                     # color for borders
# plotting box plots
beanplot(  x = exceldata$Cement,                           # data to process
main = "Box Whisker Plot for Cement",           # main title string
ylab = expression('Cement Amount (kg m'^2*")"), # y axis label
col = "grey",                                  # color for shading
border = "black")                                 # color for borders
beanplot(  x = exceldata$Water,                         # data to process
main = "Box Whisker Plot for Water",            # main title string
ylab = expression('Water Amount (kg m'^2*")"),  # y axis label
col = "blue",                                  # color for shading
border = "black")                                 # color for borders
beanplot(  x = exceldata$Compressive.Strength,              # data to process
main = "Box Whisker Plot for Compressive Strength", # main title string
ylab = "Compressive Strength (MPa)",                # y axis label
col = "red",                                       # color for shading
border = "black")                                     # color for borders
print("Cement vs Compressive Strength Correlation, r")
cor(x = exceldata$Cement,               # the x-value
y = exceldata$Compressive.Strength, # the y-value
method = "pearson"                  # method of correlation
)
print("Correlation (r) of all variables against Compressive Strength")
cor(x = exceldata,                      # this time X is the whole data frame...
y = exceldata$Compressive.Strength, # the y-value
use = "everything",                 # correlate evything
method = "pearson"
)
# Now we can plot
plot(x    = exceldata$Cement,                          # x-values (the $ lets us reach into
y    = exceldata$Compressive.Strength,            # y-values     the data frame)
main = "Example of a Single Variable Regression", # main title string
xlab = expression('Cement Amount (kg m'^2*")"),   # x-labels
ylab = "28-dy Compressive Strength (MPa)"         # y-labels
)
linear_model.S_v_c =  lm(formula = Compressive.Strength ~ Cement, # your formula y ~ x
data    = exceldata)                     # the data frame
summary(object = linear_model.S_v_c)
newx <- seq(from       =   0,  # start for a sequence
to         = 500,  # end for a sequence
length.out = 501)  # number of elements in a sequence
conf.S_v_c <- predict(object   = linear_model.S_v_c,     # your regression model
interval = c("confidence"),        # confidence or prediction intervals
level    = 0.95,                   # 1-alpha (here it's a 95% CI)
newdata  = data.frame(Cement=newx) # swapping out of new indep variables
)
data.frame(conf.S_v_c)
# Now we can plot
plot(x    = exceldata$Cement,                          # x-values (the $ lets us reach into
y    = exceldata$Compressive.Strength,            # y-values     the data frame)
main = "Example of a Single Variable Regression", # main title string
xlab = "Cement (kg m-3 concrete)",                # x-labels
ylab = "28-dy Compressive Stren. (MPa)"           # y-labels
)
# And here we can plot the regression line
abline(reg = linear_model.S_v_c,  # put the regression model information here
col = "red"                # color it red
)
# And here we create an array of the confidence limits using this "newx" field
lines(x   = newx,           # the x data
y   = conf.S_v_c[,2], # the y data (the low-end confidence limit)
col = "blue",         # make the line blue
lty = 2)              # use a dashed line
lines(x   = newx,           # the x data
y   = conf.S_v_c[,3], # the y data (the high-end confidence limit)
col = "blue",         # make the line blue
lty = 2)              # use a dashed line
linear_model.S_v_all <- lm(data    = exceldata,                       # your data frame
formula = Compressive.Strength ~ Cement +  # your formula
Slag +
Fly.ash +
Water +
Superplasticizer +
Fine.Aggregates +
Coarse.Aggregates
)
summary(object = linear_model.S_v_all)
fitted.S_v_all <- fitted(object = linear_model.S_v_all)
linear_model.S_v_Sofall <- lm(formula = fitted.S_v_all ~ exceldata$Compressive.Strength)
summary(object = linear_model.S_v_Sofall)
# first we need to set a specific graphics parameter to set our plot shape.
#   "s" makes a square, "m" is the default which maximizes the plot region.
par(pty = "s") # this makes the plot square
# (I like square plots when I plot "apples against apples")
# now a simple x-y scatterplot as before but with both axes having
#   the same range...
plot(x    = exceldata$Compressive.Strength,                        # x-values
y    = fitted.S_v_all,                                        # y-values
main = "Example of a Multiple Variable Regression",           # title string
xlab = "Obs 28-dy Compressive Stren. (MPa)",                  # x-label
ylab = "Pred 28-dy Compressive Stren. (MPa)",                 # y-label
xlim = c(min(exceldata$Compressive.Strength,fitted.S_v_all),  # x-axis range
max(exceldata$Compressive.Strength,fitted.S_v_all)),
ylim = c(min(exceldata$Compressive.Strength,fitted.S_v_all),  # y-axis range
max(exceldata$Compressive.Strength,fitted.S_v_all)),
asp = 1                                                       # aspect ratio between
)                                                             #    x and y scales
# plot the linear regression line
abline(reg = linear_model.S_v_Sofall,  # put the regression output here
col = "red"                     # color it red
)
# and we can also plot a simple one:to:one line.
abline(a   = 0,     # y-intercept
b   = 1,     # slope
col = "grey" # color it grey
)
bias = mean(fitted.S_v_all - exceldata$Compressive.Strength)
print("BIAS")
print(bias)
rmse = sqrt(mean( (fitted.S_v_all - exceldata$Compressive.Strength)^2)  )
print("RMSE")
print(rmse)
r = cor(x = fitted.S_v_all,                 # the x-value
y = exceldata$Compressive.Strength, # the y-value
method = "pearson"                  # method of correlation
)
print("correlation coefficient")
print(r)
print("coefficient of determination")
print(r^2)
library(XLConnect) # Load the "Excel Connector for R" Library. (to load the spreadsheet data)
library(MASS)      # Load the "Modern Applied Statistics with S Library"" (for regressions)
library(plyr)      # Load the "Tools for Splitting, Applying and Combining Data" Library
library(e1071)     # Load the "Misc Functions of the Department of Statistics, Probability Theory Group" Library
library(beanplot)  # Load the "Visualization via Beanplots" Library
excel_file_name <- "/Users/wjc/Downloads/L20_Non_Linear_Regression_Sandbox.xlsx"
exceldata <- readWorksheetFromFile(file   = excel_file_name, # file name here
sheet  = "Concrete",      # select the Concrete Sheet
region = "A2:K105",       # chose the cells you need to import
header = TRUE             # TRUE if the first imported row is the Header
)
str(object = exceldata)
exceldata <- rename(x       = exceldata,             # data frame you want to patch
replace = c("SP" =               # the name you want to change
"Superplasticizer")  # the replacement name
)
exceldata <- rename(x       = exceldata,
replace = c("Fine.Aggr." =
"Fine.Aggregates")
)
exceldata <- rename(x       = exceldata,
replace = c("Coarse.Aggr." =
"Coarse.Aggregates")
)
exceldata <- rename(x       = exceldata,
replace = c("SLUMP.cm." =
"SLUMP")
)
exceldata <- rename(x       = exceldata,
replace = c("FLOW.cm." =
"FLOW")
)
exceldata <- rename(x       = exceldata,
replace = c("Compressive.Strength..28.day...Mpa." =
"Compressive.Strength")
)
exceldata
Cement_Stats  = data.frame(n                 = length(  x = exceldata$Cement), # start by loading up the
mean               = mean(    x = exceldata$Cement), # data_frame with values
standard_deviation = sd(      x = exceldata$Cement),
variance           = var(     x = exceldata$Cement),
skewness           = skewness(x = exceldata$Cement),
kurtosis           = kurtosis(x = exceldata$Cement),
row.names          = "Cement Amount") # row names make a label for the frame
Water_Stats  = data.frame(n                  = length(  x = exceldata$Water),
mean               = mean(    x = exceldata$Water),
standard_deviation = sd(      x = exceldata$Water),
variance           = var(     x = exceldata$Water),
skewness           = skewness(x = exceldata$Water),
kurtosis           = kurtosis(x = exceldata$Water),
row.names          = "Water Amount")
Strength_Stats= data.frame(n                  = length(  x = exceldata$Compressive.Strength),
mean               = mean(    x = exceldata$Compressive.Strength),
standard_deviation = sd(      x = exceldata$Compressive.Strength),
variance           = var(     x = exceldata$Compressive.Strength),
skewness           = skewness(x = exceldata$Compressive.Strength),
kurtosis           = kurtosis(x = exceldata$Compressive.Strength),
row.names          = "Compressive Strength")
confidence_level = 0.95
alpha            = 1.00 - confidence_level
# the old fashioned way...
Cement_Stats$confidence_limit.95  = qt(p  = 1-alpha/2 ,
df = Cement_Stats$n-1) *
Cement_Stats$standard_deviation /
sqrt(Cement_Stats$n)
Water_Stats$confidence_limit.95   = qt(p  = 1-alpha/2 ,
df = Cement_Stats$n-1) *
Water_Stats$standard_deviation /
sqrt(Water_Stats$n)
Strength_Stats$confidence_limit.95 = qt(p  = 1-alpha/2 ,
df = Strength_Stats$n-1) *
Strength_Stats$standard_deviation /
sqrt(Strength_Stats$n)
print(Cement_Stats)
print(Water_Stats)
print(Strength_Stats)
# plotting histograms
hist(x      = exceldata$Cement,                        # data to process
breaks = 10,                                      # # of intervals
main   = "Histogram for Cement Amount",           # main title string
xlab   = expression('Cement Amount (kg m'^2*")"), # this lets us use superscripts/subscripts
col    = "grey",                                  # color for shading
border = "black")                                 # border for shading
hist(x      = exceldata$Water,                        # data to process
breaks = 10,                                     # # of intervals
main   = "Histogram for Water Amount",           # main title string
xlab   = expression('Water Amount (kg m'^2*")"), # x axis label
col    = "blue",                                 # color for shading
border = "black")                                # border for shading
hist(x      = exceldata$Compressive.Strength,         # data to process
breaks = 10,                                     # # of intervals
main   = "Histogram for Compressional Strength", # main title string
xlab   = "Compressional Strength (MPa)",         # x axis label
col    = "red",                                  # color for shading
border = "black")                                # border for shading
# plotting box plots
boxplot(x = exceldata$Cement,                           # data to process
main = "Box Whisker Plot for Cement",           # main title string
ylab = expression('Cement Amount (kg m'^2*")"), # y axis label
col = "grey",                                  # color for shading
border = "black")                                 # color for borders
boxplot(   x = exceldata$Water,                         # data to process
main = "Box Whisker Plot for Water",            # main title string
ylab = expression('Water Amount (kg m'^2*")"),  # y axis label
col = "blue",                                  # color for shading
border = "black")                                 # color for borders
boxplot(   x = exceldata$Compressive.Strength,              # data to process
main = "Box Whisker Plot for Compressive Strength", # main title string
ylab = "Compressive Strength (MPa)",                # y axis label
col = "red",                                       # color for shading
border = "black")                                     # color for borders
# plotting box plots
beanplot(  x = exceldata$Cement,                           # data to process
main = "Box Whisker Plot for Cement",           # main title string
ylab = expression('Cement Amount (kg m'^2*")"), # y axis label
col = "grey",                                  # color for shading
border = "black")                                 # color for borders
beanplot(  x = exceldata$Water,                         # data to process
main = "Box Whisker Plot for Water",            # main title string
ylab = expression('Water Amount (kg m'^2*")"),  # y axis label
col = "blue",                                  # color for shading
border = "black")                                 # color for borders
beanplot(  x = exceldata$Compressive.Strength,              # data to process
main = "Box Whisker Plot for Compressive Strength", # main title string
ylab = "Compressive Strength (MPa)",                # y axis label
col = "red",                                       # color for shading
border = "black")                                     # color for borders
print("Cement vs Compressive Strength Correlation, r")
cor(x = exceldata$Cement,               # the x-value
y = exceldata$Compressive.Strength, # the y-value
method = "pearson"                  # method of correlation
)
print("Correlation (r) of all variables against Compressive Strength")
cor(x = exceldata,                      # this time X is the whole data frame...
y = exceldata$Compressive.Strength, # the y-value
use = "everything",                 # correlate evything
method = "pearson"
)
# Now we can plot
plot(x    = exceldata$Cement,                          # x-values (the $ lets us reach into
y    = exceldata$Compressive.Strength,            # y-values     the data frame)
main = "Example of a Single Variable Regression", # main title string
xlab = expression('Cement Amount (kg m'^2*")"),   # x-labels
ylab = "28-dy Compressive Strength (MPa)"         # y-labels
)
linear_model.S_v_c =  lm(formula = Compressive.Strength ~ Cement, # your formula y ~ x
data    = exceldata)                     # the data frame
summary(object = linear_model.S_v_c)
newx <- seq(from       =   0,  # start for a sequence
to         = 500,  # end for a sequence
length.out = 501)  # number of elements in a sequence
conf.S_v_c <- predict(object   = linear_model.S_v_c,     # your regression model
interval = c("confidence"),        # confidence or prediction intervals
level    = 0.95,                   # 1-alpha (here it's a 95% CI)
newdata  = data.frame(Cement=newx) # swapping out of new indep variables
)
data.frame(conf.S_v_c)
# Now we can plot
plot(x    = exceldata$Cement,                          # x-values (the $ lets us reach into
y    = exceldata$Compressive.Strength,            # y-values     the data frame)
main = "Example of a Single Variable Regression", # main title string
xlab = "Cement (kg m-3 concrete)",                # x-labels
ylab = "28-dy Compressive Stren. (MPa)"           # y-labels
)
# And here we can plot the regression line
abline(reg = linear_model.S_v_c,  # put the regression model information here
col = "red"                # color it red
)
# And here we create an array of the confidence limits using this "newx" field
lines(x   = newx,           # the x data
y   = conf.S_v_c[,2], # the y data (the low-end confidence limit)
col = "blue",         # make the line blue
lty = 2)              # use a dashed line
lines(x   = newx,           # the x data
y   = conf.S_v_c[,3], # the y data (the high-end confidence limit)
col = "blue",         # make the line blue
lty = 2)              # use a dashed line
linear_model.S_v_all <- lm(data    = exceldata,                       # your data frame
formula = Compressive.Strength ~ Cement +  # your formula
Slag +
Fly.ash +
Water +
Superplasticizer +
Fine.Aggregates +
Coarse.Aggregates
)
summary(object = linear_model.S_v_all)
fitted.S_v_all <- fitted(object = linear_model.S_v_all)
linear_model.S_v_Sofall <- lm(formula = fitted.S_v_all ~ exceldata$Compressive.Strength)
summary(object = linear_model.S_v_Sofall)
# first we need to set a specific graphics parameter to set our plot shape.
#   "s" makes a square, "m" is the default which maximizes the plot region.
par(pty = "s") # this makes the plot square
# (I like square plots when I plot "apples against apples")
# now a simple x-y scatterplot as before but with both axes having
#   the same range...
plot(x    = exceldata$Compressive.Strength,                        # x-values
y    = fitted.S_v_all,                                        # y-values
main = "Example of a Multiple Variable Regression",           # title string
xlab = "Obs 28-dy Compressive Stren. (MPa)",                  # x-label
ylab = "Pred 28-dy Compressive Stren. (MPa)",                 # y-label
xlim = c(min(exceldata$Compressive.Strength,fitted.S_v_all),  # x-axis range
max(exceldata$Compressive.Strength,fitted.S_v_all)),
ylim = c(min(exceldata$Compressive.Strength,fitted.S_v_all),  # y-axis range
max(exceldata$Compressive.Strength,fitted.S_v_all)),
asp = 1                                                       # aspect ratio between
)                                                             #    x and y scales
# plot the linear regression line
abline(reg = linear_model.S_v_Sofall,  # put the regression output here
col = "red"                     # color it red
)
# and we can also plot a simple one:to:one line.
abline(a   = 0,     # y-intercept
b   = 1,     # slope
col = "grey" # color it grey
)
bias = mean(fitted.S_v_all - exceldata$Compressive.Strength)
print("BIAS")
print(bias)
rmse = sqrt(mean( (fitted.S_v_all - exceldata$Compressive.Strength)^2)  )
print("RMSE")
print(rmse)
r = cor(x = fitted.S_v_all,                 # the x-value
y = exceldata$Compressive.Strength, # the y-value
method = "pearson"                  # method of correlation
)
print("correlation coefficient")
print(r)
print("coefficient of determination")
print(r^2)
