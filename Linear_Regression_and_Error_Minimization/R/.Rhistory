se      = TRUE,      # display Confidence Intervals
level   = 0.95,      # Confidene Level to Map Out
colour  = "red",     # regression line color
fill    = "magenta", # fill for confidence limits
size    = 0.5)  +    # line thickness
geom_abline(slope     = 1,       # NEW: add a very simple line
intercept = 0,       #  (for a 1:1 reference)
color     = "grey",
linetype  = "dashed") +
coord_fixed(ratio = 1)           # NEW: make the aspect ratio
#   (fix the results)
bias = mean(fitted.S_v_all$Compressive_Strength_28dy_hat - fitted.S_v_all$Compressive_Strength_28dy)
print(str_c(" Mean Squared Error (MSE) or Bias: ", bias))
rmse = sqrt(mean( (fitted.S_v_all$Compressive_Strength_28dy_hat - fitted.S_v_all$Compressive_Strength_28dy)^2)  )
print(str_c("     Root Mean Squared Error (RMSE): ",
rmse))
print(str_c("Standard Error of the Estimate (se): ",
summary(linear_model.S_v_all)$sigma))  # you have to dig for this one!
r = cor(x = fitted.S_v_all$Compressive_Strength_28dy,     # the x-value
y = fitted.S_v_all$Compressive_Strength_28dy_hat, # the y-value
method = "pearson"                                # method of correlation
)
print(str_c("                        correlation coefficient (r): ", r))
print(str_c("                  coefficient of determination (r²): ", r^2,
" ",
summary(linear_model.S_v_all)$r.squared))
print(str_c("adjusted coefficient of determination (Adjusted r²): ",
summary(linear_model.S_v_all)$adj.r.squared))
# Making a simple X-Y scatterplot and adding a regression to it
ggplot(data = concrete) +                # invoke graphics environment using a given dataframe
theme_bw( ) +                           # changing the plotting theme
aes(x      = Cement,                       # x-value
y      = Compressive_Strength_28dy) +  # y-value
ggtitle("Yeh Superplasticizer Tests") +    # Custom Title
xlab(expression('Cement Amount (kg m'^-3*")")) +   # x-label
ylab("28-dy Compressive Strength (MPa)")      +   # y-label
geom_point(colour="darkgrey") +  # plot points
geom_smooth(method  = "lm",    # use a simple linar model
formula = y ~ x,   # lm-style formula
se      = TRUE,    # splay Confidence Intervals
level   = 0.95,    # Confidene Level to Map Out
colour  = "black", # regression line color
size    = 0.5)     # line thickness
ggplot(data = concrete) +                # invoke graphics environment using a given dataframe
theme_bw( ) +                           # changing the plotting theme
aes(x      = Cement,                       # x-value
y      = Compressive_Strength_28dy) +  # y-value
ggtitle("Yeh Superplasticizer Tests") +    # Custom Title
xlab(expression('Cement Amount (kg m'^-3*")")) +   # x-label
ylab("28-dy Compressive Strength (MPa)")      +   # y-label
geom_point(colour="darkgrey") +  # plot points
geom_smooth(method  = "lm",    # use a simple linar model
formula = y ~ x,   # lm-style formula
se      = TRUE,    # splay Confidence Intervals
level   = 0.95,    # Confidene Level to Map Out
colour  = "black", # regression line color
size    = 0.5)     # line thickness
# Tidyverse Handling Libraries
library(package = "tidyverse")  # main tidyverse suite
library(package = "readxl")     # Read Excel Files
library(package = "moderndive") # regression support
# Statistics Libraries
library(package = "moments")   # Moments, cumulants, skewness, kurtosis and related tests
library(package = "MASS")      # Support Functions and Datasets for Venables & Ripley's MASS text
# Extra Graphics Libraries
library(package = "beanplot")  # Visualization via Beanplots (like Boxplot/Stripchart/Violin Plot)
# Data Processing Libraries
library(package = "udunits2")  # Unit Conversion Support
library(package = "units")     # Measurement Units for R Vectors
# you will need the full path to the file you are using (either online or locally on your disk)
# MacOS
spreadsheet_name     = "~/Downloads/Base_Concrete_Slump_Test_for_R.xlsx"
# Windows
#spreadsheet_name     = "%HOMEPATH%/Downloads/Base_Concrete_Slump_Test_for_R.xlsx"
# in case it is a URL location you need to download it
# otherwise comment this indented section out
spreadsheet_url = "http://kyrill.ias.sdsmt.edu/cee_284/Base_Concrete_Slump_Test_for_R.xlsx"
download.file(url      =   spreadsheet_url, # URL location
destfile = spreadsheet_name) # local downloaded location
remove(spreadsheet_url) # clean up variables
# this command will read the file
concrete = read_excel(path      = spreadsheet_name, # local spreadsheet location
sheet     =           "Data", # page of spreadsheet
col_names =             TRUE) # first row are the column headers
remove(spreadsheet_name) # clean up variables
# Print data frame
print(concrete)
# first we clone our data frame
concrete_units = concrete
concrete_units$Cement                    = set_units(x     = concrete_units$Cement,
value = "kg m-3")
concrete_units$Slag                      = set_units(x     = concrete_units$Slag,
value = "kg m-3")
concrete_units$Fly_Ash                   = set_units(x     = concrete_units$Fly_Ash,
value = "kg m-3")
concrete_units$Water                     = set_units(x     = concrete_units$Water,
value = "kg m-3")
concrete_units$Superplasticizer          = set_units(x     = concrete_units$Superplasticizer,
value = "kg m-3")
concrete_units$Coarse_Aggregates         = set_units(x     = concrete_units$Coarse_Aggregates,
value = "kg m-3")
concrete_units$Fine_Aggregates           = set_units(x     = concrete_units$Fine_Aggregates,
value = "kg m-3")
concrete_units$Slump                     = set_units(x     = concrete_units$Slump,
value = "cm")
concrete_units$Flow                      = set_units(x     = concrete_units$Flow,
value = "cm")
concrete_units$Compressive_Strength_28dy = set_units(x     = concrete_units$Compressive_Strength_28dy,
value = "MPa")
print(concrete_units)
# a little unit-fu™️ play!
strength_in_psi = set_units(x     = concrete_units$Compressive_Strength_28dy,
value = "psi")
print(concrete_units$Compressive_Strength_28dy[1])
print(strength_in_psi[1])
# Ok now I'm being silly but so were the package developers.
# Blame them.
# (Once again, I can't do official FFF units)
cement_in_slug_per_cu3 = set_units(x     = concrete_units$Cement,
value = "slugs/furlongs^3")
print(concrete_units$Cement[1])
print(cement_in_slug_per_cu3[1])
# cleaning-up our horseplay..
remove(strength_in_psi)
remove(cement_in_slug_per_cu3)
# statistics for cement
print(str_c("Mean Cement : ",
mean(x     = concrete_units$Cement, # variable to crunch
na.rm =                  TRUE) # ignore msissing data
))
print(str_c("Stdev Cement : ",
sd(x     = concrete_units$Cement, # variable to crunch
na.rm =                  TRUE) # ignore msissing data
))
print(str_c("Skewness Cement : ",
skewness(x     = concrete_units$Cement, # variable to crunch
na.rm =                  TRUE) # ignore msissing data
))
print(str_c("Kurtosis Cement : ",
kurtosis(x     = concrete_units$Cement, # variable to crunch
na.rm =                  TRUE) # ignore msissing data
))
# statistics for water
print(str_c("Mean Water : ",
mean(x     = concrete_units$Water, # variable to crunch
na.rm =                 TRUE) # ignore msissing data
))
print(str_c("Stdev Water : ",
sd(x     = concrete_units$Water, # variable to crunch
na.rm =                TRUE) # ignore msissing data
))
print(str_c("Skewness Water : ",
skewness(x     = concrete_units$Water, # variable to crunch
na.rm =                 TRUE) # ignore msissing data
))
print(str_c("Kurtosis Water : ",
kurtosis(x     = concrete_units$Water, # variable to crunch
na.rm =                 TRUE) # ignore msissing data
))
# statistics for strength
print(str_c("Mean Water : ",
mean(x     = concrete_units$Compressive_Strength_28dy, # variable to crunch
na.rm =                                    TRUE) # ignore msissing data
))
print(str_c("Stdev Water : ",
sd(x     = concrete_units$Compressive_Strength_28dy, # variable to crunch
na.rm =                                     TRUE) # ignore msissing data
))
print(str_c("Skewness Water : ",
skewness(x     = concrete_units$Compressive_Strength_28dy, # variable to crunch
na.rm =                                     TRUE) # ignore msissing data
))
print(str_c("Kurtosis Water : ",
kurtosis(x     = concrete_units$Compressive_Strength_28dy, # variable to crunch
na.rm =                                     TRUE) # ignore msissing data
))
# invoke the ggplot plotting environmnent.
ggplot()
ggplot(data = concrete) +   # EDIT:  invoke graphics environment using a given dataframe
aes(x    = Cement)        # NEW: select variable to print... You can get really fancy here later
ggplot(data = concrete) +   # invoke graphics environment using a given dataframe
aes(x = Cement)   +       # select variable to print... You can get really fancy here later
geom_histogram()          # NEW: insert histogram
ggplot(data = concrete) + # invoke graphics environment using a given dataframe
theme_bw() +            # NEW: changing the plotting theme
aes(x = Cement) +       # select variable to print... You can get really fancy here later
geom_histogram()        # insert histogram (including controlling number of bins)
ggplot(data = concrete) +     # invoke graphics environment using a given dataframe
theme_bw() +                # changing the plotting theme
aes(x = Cement) +           # select variable to print... You can get really fancy here later
xlim( 100, 400 ) +          # NEW: adding x-axis limits
geom_histogram()            # insert histogram
ggplot(data = concrete) +     # invoke graphics environment using a given dataframe
theme_bw() +                # changing the plotting theme
aes(x = Cement) +           # select variable to print... You can get really fancy here later
xlim( 100, 400 ) +          # NEW: adding x-axis limits
geom_histogram(fill="gray") # EDIT: insert histogram (with a single chosen color)
ggplot(data = concrete) +     # invoke graphics environment using a given dataframe
theme_bw() +                # changing the plotting theme
aes(x = Cement) +           # select variable to print... You can get really fancy here later
xlim( 100, 400 ) +          # adding x-axis limits
ggtitle("Yeh Superplasticizer Tests") +          # NEW : Custom Title
xlab(expression('Cement Amount (kg m'^-3*")")) + # NEW : Custom Axis Label
geom_histogram(fill="gray") # insert histogram (with a single chosen color)
# Histogram of Water
ggplot(data = concrete) +     # invoke graphics environment using a given dataframe
theme_bw() +                # changing the plotting theme
aes(x = Water) +           # select variable to print... You can get really fancy here later
xlim( 150, 250 ) +          # adding x-axis limits
ggtitle("Yeh Superplasticizer Tests") + #Custom Title
xlab(expression('Water Amount (kg m'^-3*")")) + # NEW : Custom Axis Label note use of superscripts from above
geom_histogram(fill="blue") # insert histogram (with a single chosen color)
# Histogram of Strength
ggplot(data = concrete) +     # invoke graphics environment using a given dataframe
theme_bw() +                # changing the plotting theme
aes(x = Compressive_Strength_28dy) + # select variable to print... You can get really fancy here later
xlim( 10, 60 ) +          # adding x-axis limits
ggtitle("Yeh Superplasticizer Tests") + #Custom Title
xlab("28-dy Compressive Strength (MPa)") + # NEW : Custom Axis Label
geom_histogram(fill="red") # insert histogram (with a single chosen color)
# Gathering our components into a single column.
column_names  = colnames(concrete[2:ncol(concrete)])    # we don't want the first column
concrete_tidy = gather(data  =    concrete, # your data frame
key   = "Parameter", # column name for your former columns
value =     "Value", # column name for your data
column_names       ) # the list for the columns to "gather"
# this will let us sort future plots in the same order as our plots.
concrete_tidy$Parameter = factor(x      = concrete_tidy$Parameter,
levels = column_names)
concrete_dependant = subset(x      = concrete_tidy,
subset = (Parameter == "Slump") |
(Parameter == "Flow")  |
(Parameter == "Compressive_Strength_28dy")
)
print(concrete_tidy)
ggplot(data = concrete_tidy) +            # invoke graphics environment using a given dataframe
theme_bw() +                            # changing the plotting theme
aes(x      = Value,                     # map x-axis value
color  = Parameter) +               # map colors for different quality
ggtitle("Yeh Superplasticizer Tests") + # Custom Title
xlab("Value") +                         #  Custom Axis Label
geom_density()                          # insert crete a relative density plot
ggplot(data = concrete_tidy) +            # invoke graphics environment using a given dataframe
theme_bw( ) +                            # changing the plotting theme
theme(axis.text.x = element_blank()) +   # adding an extra trait to the x-axis
# to not print labels on the x-axis
# (the labels overlap and doesn't look
# pretty...)
aes(y      = Value,                     # map y-axis value
x      = Parameter,                 # map x-axis value
color  = Parameter) +               # map colors for different quality
ggtitle("Yeh Superplasticizer Tests") + # Custom Title
ylab("Value") +                         #  Custom Axis Label
geom_boxplot()                          # insert crete a relative density plot
ggplot(data = concrete_tidy) +            # invoke graphics environment using a given dataframe
theme_bw( ) +                            # changing the plotting theme
theme(axis.text.x = element_blank()) +    # adding an extra trait to the x-axis
aes(y      = Value,                     # map y-axis value
x      = Parameter,
color  = Parameter,width=Value) +   # map colors for different quality
# I had to set that width paramerter by a lot of
# trial and error...
ggtitle("Yeh Superplasticizer Tests") + # Custom Title
ylab("Value") +                         #  Custom Axis Label
geom_violin()                          # insert crete a relative density plot
print("Cement vs Compressive Strength Correlation, r")
cor(x = concrete$Cement,                    # the x-value
y = concrete$Compressive_Strength_28dy, # the y-value
method = "pearson"                      # method of correlation
)
print("Correlation (r) of all variables against each other")
cor(x      = concrete, # using our dataframe to correlate evything
method = "pearson" )
# Making a simple X-Y scatterplot.
ggplot(data = concrete) +                # invoke graphics environment using a given dataframe
theme_bw( ) +                           # changing the plotting theme
aes(x      = Cement,                       # x-value
y      = Compressive_Strength_28dy) +  # y-value
ggtitle("Yeh Superplasticizer Tests") +    # Custom Title
xlab(expression('Cement Amount (kg m'^3*")")) +   # x-label
ylab("28-dy Compressive Strength (MPa)")      +   # y-label
geom_point(colour="grey")   # EDIT: plot points the color keyword part was
#       writen by an anglophile!
# Making a simple X-Y scatterplot now coloured by another parameter
ggplot(data = concrete) +                # invoke graphics environment using a given dataframe
theme_bw( ) +                           # changing the plotting theme
aes(x      = Cement,                       # x-value
y      = Compressive_Strength_28dy,    # y-value
color  = Superplasticizer)          +  # ADD: we can color by a variable!
ggtitle("Yeh Superplasticizer Tests") +    # Custom Title
xlab(expression('Cement Amount (kg m'^3*")")) +   # x-label
ylab("28-dy Compressive Strength (MPa)")      +   # y-label
geom_point() +  # plot points
scale_color_distiller(palette = "Spectral") # NEW: pick a custom "colour" palate.
# way too many tiny plots!
pairs(x   = concrete, # do everything in the dataframe
pch = ".")      # plot dots (the default is circles)
linear_model.S_v_c =  lm(formula = Compressive_Strength_28dy ~ Cement, # your formula y ~ x
data    = concrete)                           # the data frame
summary(object = linear_model.S_v_c)
# Making a simple X-Y scatterplot and adding a regression to it
ggplot(data = concrete) +                # invoke graphics environment using a given dataframe
theme_bw( ) +                           # changing the plotting theme
aes(x      = Cement,                       # x-value
y      = Compressive_Strength_28dy) +  # y-value
ggtitle("Yeh Superplasticizer Tests") +    # Custom Title
xlab(expression('Cement Amount (kg m'^-3*")")) +   # x-label
ylab("28-dy Compressive Strength (MPa)")      +   # y-label
geom_point(colour="darkgrey") +  # plot points
geom_smooth(method  = "lm",    # use a simple linar model
formula = y ~ x,   # lm-style formula
se      = TRUE,    # splay Confidence Intervals
level   = 0.95,    # Confidene Level to Map Out
colour  = "black", # regression line color
size    = 0.5)     # line thickness
# getting the linear model
linear_model.S_v_w =  lm(formula = Compressive_Strength_28dy ~ Water, # your formula y ~ x
data    = concrete   )                           # the data frame
summary(linear_model.S_v_w)
# Making a simple X-Y scatterplot and adding a regression to it
ggplot(data = concrete) +                # invoke graphics environment using a given dataframe
theme_bw( ) +                           # changing the plotting theme
aes(x      = Water,                      # x-value
y      = Compressive_Strength_28dy) +  # y-value
ggtitle("Yeh Superplasticizer Tests") +    # Custom Title
xlab(expression('Water Amount (kg m'^-3*")")) +  # x-label
ylab("28-dy Compressive Strength (MPa)")      +   # y-label
geom_point(colour="darkblue") +  # plot points
geom_smooth(method  = "lm",    # use a simple linar model
formula = y ~ x,   # lm-style formula
se      = TRUE,    # splay Confidence Intervals
level   = 0.95,    # Confidene Level to Map Out
colour  = "blue",  # regression line color
fill    = "cyan",  # NEW: fill for confidence limits
size    = 0.5)     # line thickness
linear_model.S_v_all <- lm(data    = concrete,                             # your data frame
formula = Compressive_Strength_28dy ~ Cement +  # your formula
Slag +
Fly_Ash +
Water +
Superplasticizer +
Fine_Aggregates +
Coarse_Aggregates)
summary(object = linear_model.S_v_all)
fitted.S_v_all = get_regression_points(model = linear_model.S_v_all)
print(fitted.S_v_all)
# Making a simple X-Y scatterplot and adding a regression to it
ggplot(data = fitted.S_v_all) +           # invoke graphics environment using a given dataframe
theme_bw( ) +                           # changing the plotting theme
aes(x      = Compressive_Strength_28dy,    # x-value
y      = Compressive_Strength_28dy_hat) +  # y-value
ggtitle("Yeh Superplasticizer Tests",
subtitle = "28-dy Compressive Strength (MPa)") +    # EDITED: Custom Title now with a subtitle
ylab("Modelled")     + # y-label
xlab("Observed")     + # x-label
geom_point(colour="darkred") +  # plot points
geom_smooth(method  = "lm",      # use a simple linar model
formula = y ~ x,     # lm-style formula
se      = TRUE,      # display Confidence Intervals
level   = 0.95,      # Confidene Level to Map Out
colour  = "red",     # regression line color
fill    = "magenta", # fill for confidence limits
size    = 0.5)  +    # line thickness
geom_abline(slope     = 1,       # NEW: add a very simple line
intercept = 0,       #  (for a 1:1 reference)
color     = "grey",
linetype  = "dashed") +
coord_fixed(ratio = 1)           # NEW: make the aspect ratio
#   (fix the results)
bias = mean(fitted.S_v_all$Compressive_Strength_28dy_hat - fitted.S_v_all$Compressive_Strength_28dy)
print(str_c(" Mean Squared Error (MSE) or Bias: ", bias))
rmse = sqrt(mean( (fitted.S_v_all$Compressive_Strength_28dy_hat - fitted.S_v_all$Compressive_Strength_28dy)^2)  )
print(str_c("     Root Mean Squared Error (RMSE): ",
rmse))
print(str_c("Standard Error of the Estimate (se): ",
summary(linear_model.S_v_all)$sigma))  # you have to dig for this one!
r = cor(x = fitted.S_v_all$Compressive_Strength_28dy,     # the x-value
y = fitted.S_v_all$Compressive_Strength_28dy_hat, # the y-value
method = "pearson"                                # method of correlation
)
print(str_c("                        correlation coefficient (r): ", r))
print(str_c("                  coefficient of determination (r²): ", r^2,
" ",
summary(linear_model.S_v_all)$r.squared))
print(str_c("adjusted coefficient of determination (Adjusted r²): ",
summary(linear_model.S_v_all)$adj.r.squared))
survey %>% mean()
summary(survey)
# Tidyverse Libraries
# one habit that I've gotten into with R is to always include
#  the arguments when calling a procedure or function in R.
#  not a lot of people do this but I'm anal.  So you'll see
#  a lot of explicit function(argument=value) calls in my code.
library(package = "tidyverse")  # Loads Tidyverse Packages whether you need it or not.
#   ggplot2  (Create Elegant Data Visualisations Using The Grammar Of Graphics)
#   tibble   (Simple Data Frames)
#   tidyr    (Easily Tidy Data with 'spread()' and 'gather()' Functions)
#   readr    (Read Rectangular Text Data)
#   purr     (Functional Programming Tools)
#   dpylr    (A Grammar Of Data Manipulation)
#   stringr  (Simple, Consistent Wrappers For Common String Operations)
#   forcats  (Tools For Working With Categorical Variables (Factors))
library(package = "readxl")    # Read Excel Files
# Other Support Libraries
library(package = "qwraps2") # Support for Tabluar Statistics
# Inporting spreadsheet
file_name = "Data_Analysis_Ready_for_R.xlsx"
original_table = read_excel(path  = file_name)
# it reads the data as a "tibble" wich is another way to manage
# data from R's normal data frame.  I am not used to this structure
# so I use R's default "data frame"
original_table = as.data.frame(original_table)
print(original_table)
# (I always clean variables I'll no longer use when done)
remove(file_name) # takes variable out of memory
# Gathering Respondants into a single column.
# First let's collect all the names of the respondents.
# Our column names can be extracted from the original table
# since the first 3 columns are talking about the questions,
# we can jump over them.
# we first get our column rows (all of them)
respondents = colnames(x = original_table)
# now we prune the column names and get rid the first three columns
# by selecting only the column names from #4 to the last value
respondents = respondents[ 4 : length(x = respondents) ]
# now we gather the requested columns into a single column
# and we give the values of the column headers their own column.
survey = gather(data  = original_table, # your data frame
key   = "Respondents",  # new column for your former columns
value = "Response",     # new column for your acutal data
respondents       )     # the list for the old columns to "gather"
print(survey)
summary(survey)
# invoke the ggplot plotting environmnent.
ggplot() # NEW just invokes the plotting space...
ggplot(data = survey) +   # EDIT:  invoke graphics environment using a given dataframe
# notice the plus sign... we're adding things together...
# (I often forget to add it at the end...)
aes(x     = Question,  # NEW: select variable to print... You can get really fancy here later
y     = Response,
group = Question)  # this will be used to sort our histograms
ggplot(data = survey) +   # invoke graphics environment using a given dataframe
aes(x     = Question,   # select variable for axes to print...
y     = Response,
group = Question) +
geom_boxplot()            # NEW: acutally plotting something!
ggplot(data = survey) +   # invoke graphics environment using a given dataframe
aes(x     = Question, # EDIT: Mapping variables for plotting and color
y     = Response,
group = Question,
fill  = Category,
color = Engineering_Related) +
geom_boxplot() #  making a box plot
ggplot(data = survey) +   # invoke graphics environment using a given dataframe
theme_bw() +            # NEW: changing the plotting theme
aes(x     = Question, # Mapping variables for plotting and color
y     = Response,
group = Question,
fill  = Category,
color = Engineering_Related) +
geom_boxplot()  # making a box plot
ggplot(data = survey) +   # invoke graphics environment using a given dataframe
theme_bw() +            # changing the plotting theme
aes(x     = Category,   # EDIT: mapping variables for plotting and color
y     = Response,   #       *also "less is more"*
fill  = Category) +
geom_boxplot()  # making a box plot
ggplot(data = survey) +   # invoke graphics environment using a given dataframe
theme_bw() +            # changing the plotting theme
ggtitle(label    = "Survey Responses", # NEW: adding a title'
subtitle = "Grouped by Category and Respondant") +
aes(x     = Category,   # EDIT: mapping variables for plotting and color
y     = Response)  +       # removing colors by categories
geom_boxplot() +  # making a box plot
geom_jitter(width=0.1,         # NEW: Adding wiggly dots colored by the respondants ID.
mapping= aes(color=Respondents)) # (the width argument keeps the wiggles
# closer to the center lines)
summary(survey)
summary(survey~Category)
summary(survey)
summary(survey~Category)
summary(survey~Category)
summary %>% group_by(Category) %>% summarize(mean=mean(dt), sum=sum(dt))
summary %>% group_by(Category)
summarize(survey)
survey %>% group_by(Category) %>% summarize(mean=mean(dt), sum=sum(dt))
survey %>% group_by(Question) %>% summarize(mean=mean(dt), sum=sum(dt))
survey %>% group_by(Question) %>% summarize()
survey %>% group_by(Question) %>% summarize()
survey %>% group_by(Category) %>% summarize()
survey %>% group_by(Category) %>% summarize(mean)
describe(survey)
survey %>% group_by(Category) %>% summarize(mean)
do.call(survey,
list(mean = apply(survey, 2, mean),
sd = apply(survey, 2, sd),
median = apply(survey, 2, median),
min = apply(survey, 2, min),
max = apply(survey, 2, max),
n = apply(survey, 2, length)))
list(mean = apply(survey, 2, mean),
sd = apply(survey, 2, sd),
median = apply(survey, 2, median),
min = apply(survey, 2, min),
max = apply(survey, 2, max),
n = apply(survey, 2, length)))
list(mean = apply(survey, 2, mean),
sd = apply(survey, 2, sd),
median = apply(survey, 2, median),
min = apply(survey, 2, min),
max = apply(survey, 2, max),
n = apply(survey, 2, length))
