geom.ind     = "point",                    # show points only (but not "text")
legend.title = "Land Use",                 # Label for Class Legend
col.ind      = Landsat_7_Samples$Class,    # Class Values for Data Point
palette      = Landsat_7_Samples_ColorMap, # Color Palette for Data Points
alpha.ind    = 0.5,                        # Color Transparency for Data Points
col.var      = "black",                    # PCA->Real Vector Color
addEllipses  = TRUE)                       # Add Concentration ellipses
View(Landsat_Reflectances)
Landsat_Reflectances = Landsat_7_Samples %>%
select(c(ETM1,
ETM2,
ETM3,
ETM4,
ETM5,
ETM7))
Landsat_Reflectances$rowname = str_c(Landsat_7_Samples$Class,
":",
sprintf("%03d",
Landsat_7_Samples$ID))
Landsat_Reflectances = Landsat_Reflectances %>%
column_to_rownames(var = "rowname")
View(x = Landsat_Reflectances)
Landsat_PCA = PCA(X          = Landsat_Reflectances, # Original Data Frame
scale.unit = TRUE,                 # Scale to 1 SD
graph      = FALSE)                # Don't Graph Because the one below is prettier
fviz_pca_biplot(X            = Landsat_PCA,                # PCA Data Frame
title        = str_c("PCA Analysis: ",     # Plot Label)
"Landsat 7 ETM+, ",
"Rapid City, SD, ",
"2001-08-16 1725 UTC",
sep = ""),
geom.ind     = "point",                    # show points only (but not "text")
legend.title = "Land Use",                 # Label for Class Legend
col.ind      = Landsat_7_Samples$Class,    # Class Values for Data Point
palette      = Landsat_7_Samples_ColorMap, # Color Palette for Data Points
alpha.ind    = 0.5,                        # Color Transparency for Data Points
col.var      = "black",                    # PCA->Real Vector Color
addEllipses  = TRUE)                       # Add Concentration ellipses
Landsat_Reflectances = Landsat_7_Samples %>%
select(c(ETM1,
ETM2,
ETM3,
ETM4,
ETM5,
ETM7))
Landsat_Reflectances$rowname = str_c(Landsat_7_Samples$Class,
":",
sprintf("%03d",
Landsat_7_Samples$ID))
Landsat_Reflectances = Landsat_Reflectances %>%
column_to_rownames(var = "rowname")
print(Landsat_Reflectances)
Landsat_PCA = PCA(X          = Landsat_Reflectances, # Original Data Frame
scale.unit = TRUE,                 # Scale to 1 SD
graph      = FALSE)                # Don't Graph Because the one below is prettier
fviz_pca_biplot(X            = Landsat_PCA,                # PCA Data Frame
title        = str_c("PCA Analysis: ",     # Plot Label)
"Landsat 7 ETM+, ",
"Rapid City, SD, ",
"2001-08-16 1725 UTC",
sep = ""),
geom.ind     = "point",                    # show points only (but not "text")
legend.title = "Land Use",                 # Label for Class Legend
col.ind      = Landsat_7_Samples$Class,    # Class Values for Data Point
palette      = Landsat_7_Samples_ColorMap, # Color Palette for Data Points
alpha.ind    = 0.5,                        # Color Transparency for Data Points
col.var      = "black",                    # PCA->Real Vector Color
addEllipses  = TRUE)                       # Add Concentration ellipses
# Plot Classic Red-NIR Arrowhead
ggplot(data = Landsat_7_Samples) +
aes(x     = ETM3,
y     = ETM4,
color = Class) +
theme_bw() +
coord_fixed() +
ggtitle(label    = "Landsat 7 ETM+ Data",
subtitle = "Rapid City, SD") +
xlab(label = "0.66-μm Reflectance") +
ylab(label = "0.84-μm Reflectance") +
xlim(0, max(Landsat_7_Samples$ETM3,
Landsat_7_Samples$ETM4)) +
ylim(0, max(Landsat_7_Samples$ETM3,
Landsat_7_Samples$ETM4)) +
scale_color_manual(values = Landsat_7_Samples_ColorMap) +
geom_point(alpha = 0.5)
load(file = url("http://kyrill.ias.sdsmt.edu/wjc/github_math_tools/PCA/Landsat/Landsat_7_Rapid_City_ETM_2001-08-16_1725_Classes.Rdata"))
# Dark Object Subtraction (assuming water target)
Landsat_7_Samples$ETM1 =  Landsat_7_Samples$ETM1 - min( Landsat_7_Samples$ETM1 )
Landsat_7_Samples$ETM2 =  Landsat_7_Samples$ETM2 - min( Landsat_7_Samples$ETM2 )
Landsat_7_Samples$ETM3 =  Landsat_7_Samples$ETM3 - min( Landsat_7_Samples$ETM3 )
Landsat_7_Samples$ETM4 =  Landsat_7_Samples$ETM4 - min( Landsat_7_Samples$ETM4 )
Landsat_7_Samples$ETM5 =  Landsat_7_Samples$ETM5 - min( Landsat_7_Samples$ETM5 )
Landsat_7_Samples$ETM7 =  Landsat_7_Samples$ETM7 - min( Landsat_7_Samples$ETM7 )
print(Landsat_7_Samples_ColorMap)
load(file = url("http://kyrill.ias.sdsmt.edu/wjc/github_math_tools/PCA/Landsat/Landsat_7_Rapid_City_ETM_2001-08-16_1725_Classes.Rdata"))
# Dark Object Subtraction (assuming water target)
Landsat_7_Samples$ETM1 =  Landsat_7_Samples$ETM1 - min( Landsat_7_Samples$ETM1 )
Landsat_7_Samples$ETM2 =  Landsat_7_Samples$ETM2 - min( Landsat_7_Samples$ETM2 )
Landsat_7_Samples$ETM3 =  Landsat_7_Samples$ETM3 - min( Landsat_7_Samples$ETM3 )
Landsat_7_Samples$ETM4 =  Landsat_7_Samples$ETM4 - min( Landsat_7_Samples$ETM4 )
Landsat_7_Samples$ETM5 =  Landsat_7_Samples$ETM5 - min( Landsat_7_Samples$ETM5 )
Landsat_7_Samples$ETM7 =  Landsat_7_Samples$ETM7 - min( Landsat_7_Samples$ETM7 )
print(Landsat_7_Samples)
load(file = url("http://kyrill.ias.sdsmt.edu/wjc/github_math_tools/PCA/Landsat/Landsat_7_Rapid_City_ETM_2001-08-16_1725_Classes.Rdata"))
# Dark Object Subtraction (assuming water target)
Landsat_7_Samples$ETM1 =  Landsat_7_Samples$ETM1 - min( Landsat_7_Samples$ETM1 )
Landsat_7_Samples$ETM2 =  Landsat_7_Samples$ETM2 - min( Landsat_7_Samples$ETM2 )
Landsat_7_Samples$ETM3 =  Landsat_7_Samples$ETM3 - min( Landsat_7_Samples$ETM3 )
Landsat_7_Samples$ETM4 =  Landsat_7_Samples$ETM4 - min( Landsat_7_Samples$ETM4 )
Landsat_7_Samples$ETM5 =  Landsat_7_Samples$ETM5 - min( Landsat_7_Samples$ETM5 )
Landsat_7_Samples$ETM7 =  Landsat_7_Samples$ETM7 - min( Landsat_7_Samples$ETM7 )
print(Landsat_7_Samples)
print(Landsat_7_Samples_ColorMap)
print(Landsat_7_Bands_Metadata)
load(file = url("http://kyrill.ias.sdsmt.edu/wjc/github_math_tools/PCA/Landsat/Landsat_7_Rapid_City_ETM_2001-08-16_1725_Classes.Rdata"))
# Dark Object Subtraction (assuming water target)
Landsat_7_Samples$ETM1 =  Landsat_7_Samples$ETM1 - min( Landsat_7_Samples$ETM1 )
Landsat_7_Samples$ETM2 =  Landsat_7_Samples$ETM2 - min( Landsat_7_Samples$ETM2 )
Landsat_7_Samples$ETM3 =  Landsat_7_Samples$ETM3 - min( Landsat_7_Samples$ETM3 )
Landsat_7_Samples$ETM4 =  Landsat_7_Samples$ETM4 - min( Landsat_7_Samples$ETM4 )
Landsat_7_Samples$ETM5 =  Landsat_7_Samples$ETM5 - min( Landsat_7_Samples$ETM5 )
Landsat_7_Samples$ETM7 =  Landsat_7_Samples$ETM7 - min( Landsat_7_Samples$ETM7 )
print(Landsat_7_Samples)
print(as.tibble(Landsat_7_Samples_ColorMap))
print(Landsat_7_Bands_Metadata)
load(file = url("http://kyrill.ias.sdsmt.edu/wjc/github_math_tools/PCA/Landsat/Landsat_7_Rapid_City_ETM_2001-08-16_1725_Classes.Rdata"))
# Dark Object Subtraction (assuming water target)
Landsat_7_Samples$ETM1 =  Landsat_7_Samples$ETM1 - min( Landsat_7_Samples$ETM1 )
Landsat_7_Samples$ETM2 =  Landsat_7_Samples$ETM2 - min( Landsat_7_Samples$ETM2 )
Landsat_7_Samples$ETM3 =  Landsat_7_Samples$ETM3 - min( Landsat_7_Samples$ETM3 )
Landsat_7_Samples$ETM4 =  Landsat_7_Samples$ETM4 - min( Landsat_7_Samples$ETM4 )
Landsat_7_Samples$ETM5 =  Landsat_7_Samples$ETM5 - min( Landsat_7_Samples$ETM5 )
Landsat_7_Samples$ETM7 =  Landsat_7_Samples$ETM7 - min( Landsat_7_Samples$ETM7 )
print(Landsat_7_Samples)
print(as_tibble(Landsat_7_Samples_ColorMap))
print(as_tibble(Landsat_7_Bands_Metadata))
load(file = url("http://kyrill.ias.sdsmt.edu/wjc/github_math_tools/PCA/Landsat/Landsat_7_Rapid_City_ETM_2001-08-16_1725_Classes.Rdata"))
# Dark Object Subtraction (assuming water target)
Landsat_7_Samples$ETM1 =  Landsat_7_Samples$ETM1 - min( Landsat_7_Samples$ETM1 )
Landsat_7_Samples$ETM2 =  Landsat_7_Samples$ETM2 - min( Landsat_7_Samples$ETM2 )
Landsat_7_Samples$ETM3 =  Landsat_7_Samples$ETM3 - min( Landsat_7_Samples$ETM3 )
Landsat_7_Samples$ETM4 =  Landsat_7_Samples$ETM4 - min( Landsat_7_Samples$ETM4 )
Landsat_7_Samples$ETM5 =  Landsat_7_Samples$ETM5 - min( Landsat_7_Samples$ETM5 )
Landsat_7_Samples$ETM7 =  Landsat_7_Samples$ETM7 - min( Landsat_7_Samples$ETM7 )
print(Landsat_7_Samples)
print(enframe(Landsat_7_Samples_ColorMap))
print(enframe(Landsat_7_Bands_Metadata))
# print Dataset
print(enframe(Landsat_7_Samples_ColorMap))
# Plot Classic Red-NIR Arrowhead
ggplot(data = Landsat_7_Samples) + # create a graphic object
aes(x     = ETM3,                # select variables that will be plotted
y     = ETM4,                # and mapped.
color = Class) +
theme_bw() +                     # simple black and white theme.
coord_fixed() +                           # creates a nice 1:1 proportion in plotting.
ggtitle(label    = "Landsat 7 ETM+ Data",
subtitle = "Rapid City, SD, 2001-08-16 1725 UTC") +
xlab(label = "0.66-μm Reflectance") +     # label your axes!
ylab(label = "0.84-μm Reflectance") +     # ALL of them!
xlim(0, max(Landsat_7_Samples$ETM3,       # here we are making a nice square plot
Landsat_7_Samples$ETM4)) +    # where both axis have the same extent
ylim(0, max(Landsat_7_Samples$ETM3,
Landsat_7_Samples$ETM4)) +
scale_color_manual(values = Landsat_7_Samples_ColorMap) + # use our color table.
geom_point(alpha = 0.5)  # and throw out a scatter point set.
# Prepare Data for PCA Analysis
# Step 1: Collect ONLY the values you want to use in the PCA
Landsat_Reflectances = Landsat_7_Samples %>%
select(c(ETM1,
ETM2,
ETM3,
ETM4,
ETM5,
ETM7))
# Chose/Createa vector for identifying *each* Pixel.
#  Since the values need to be unique I am merging
#     my class label with the id number for the pixels
#     in each class
#
# If you want to group pixels you should keep
#    a second vector corresponding to the groups
#    for later.  For us this is the Landsat_7_Samples$Class
Landsat_Reflectances$rowname = str_c(Landsat_7_Samples$Class,
":",
sprintf("%03d",                 # C-style format code
Landsat_7_Samples$ID), # value to be parsed
sep = "")
# Convert "rowname" column into a seprate value coordinate for each row.
#   this removes the variable from the data frame and places uses it to
#   "number" each row
Landsat_Reflectances = Landsat_Reflectances %>%
column_to_rownames(var = "rowname")
# now we can inspect our work
print(Landsat_Reflectances)
Landsat_PCA = PCA(X          = Landsat_Reflectances, # Original Data Frame
scale.unit = TRUE,                 # Scale to 1 SD
graph      = FALSE)                # Don't Graph Because the one below is prettier\
fviz_pca_biplot(X            = Landsat_PCA,                # PCA Data Frame
title        = str_c("PCA Analysis: ",     # Plot Label)
"Landsat 7 ETM+, ",
"Rapid City, SD, ",
"2001-08-16 1725 UTC",
sep = ""),
geom.ind     = "point",                    # show points only (but not "text")
legend.title = "Land Use",                 # Label for Class Legend
col.ind      = Landsat_7_Samples$Class,    # Class Values for Data Point
palette      = Landsat_7_Samples_ColorMap, # Color Palette for Data Points
alpha.ind    = 0.5,                        # Color Transparency for Data Points
col.var      = "black",                    # PCA->Real Vector Color
addEllipses  = TRUE)                       # Add Concentration ellipses
dataset = read.csv(url(description = "https://astrostatistics.psu.edu/su09/lecturenotes/marks.dat"))
View(dataset)
dataset = read.table(url(description = "https://astrostatistics.psu.edu/su09/lecturenotes/marks.dat"))
dataset = read.table(file   = url(description = "https://astrostatistics.psu.edu/su09/lecturenotes/marks.dat"),
header = TRUE,
sep    = "")
# Penn State
x = read.table(file   = url(description = "https://astrostatistics.psu.edu/su09/lecturenotes/marks.dat"),
header = TRUE,
sep    = "")
print(x)
# Penn State
x = read.table(file   = url(description = "https://astrostatistics.psu.edu/su09/lecturenotes/marks.dat"),
header = TRUE,
sep    = "")
colnames(x) = c("x1","x2")
print(x)
# Plot Classic Red-NIR Arrowhead
ggplot(data = x) + # create a graphic object
aes(x     = Phys,                # select variables that will be plotted
y     = Stat) +
theme_bw() +                     # simple black and white theme.
coord_fixed() +                           # creates a nice 1:1 proportion in plotting.
ggtitle(label    = "Penn State Sample Set") +
xlim(0, max(x$x1,       # here we are making a nice square plot
x$x2)) +    # where both axis have the same extent...
ylim(0, max(x$x1,       # here we are making a nice square plot
x$x2)) +
geom_point(alpha = 0.5)  # and throw out a scatter point set.
# Plot Classic Red-NIR Arrowhead
ggplot(data = x) + # create a graphic object
aes(x     = x1,                # select variables that will be plotted
y     = x2) +
theme_bw() +                     # simple black and white theme.
coord_fixed() +                           # creates a nice 1:1 proportion in plotting.
ggtitle(label    = "Penn State Sample Set") +
xlim(0, max(x$x1,       # here we are making a nice square plot
x$x2)) +    # where both axis have the same extent...
ylim(0, max(x$x1,       # here we are making a nice square plot
x$x2)) +
geom_point(alpha = 0.5)  # and throw out a scatter point set.
# Plot Classic Red-NIR Arrowhead
ggplot(data = x) + # create a graphic object
aes(x     = x1,                # select variables that will be plotted
y     = x2) +
theme_bw() +                     # simple black and white theme.
coord_fixed() +                           # creates a nice 1:1 proportion in plotting.
ggtitle(label    = "Penn State Sample Set") +
xlim(min(x$x1,
x$x2),
max(x$x1,
x$x2)) +
xlim(min(x$x1,
x$x2),
max(x$x1,
x$x2)) +
geom_point(alpha = 0.5)  # and throw out a scatter point set.
# Plot Classic Red-NIR Arrowhead
ggplot(data = x) + # create a graphic object
aes(x     = x1,                # select variables that will be plotted
y     = x2) +
theme_bw() +                     # simple black and white theme.
coord_fixed() +                           # creates a nice 1:1 proportion in plotting.
ggtitle(label = "Penn State Sample Set") +
xlim(min(x$x1,
x$x2),
max(x$x1,
x$x2)) +
ylim(min(x$x1,
x$x2),
max(x$x1,
x$x2)) +
geom_point(alpha = 0.5)  # and throw out a scatter point set.
corr(x)
cor(x)
cor(x)
corrplot(x)
cor(x)
corrplot(cor(x))
# print Dataset
print(Landsat_7_Samples)
# Calculating and Displaying
corplot(corr(Landsat_7_Bands_Metadata[9:13]))
# Calculating and Displaying
corrplot(corr(Landsat_7_Bands_Metadata[9:13]))
# Calculating and Displaying
corrplot(cor(Landsat_7_Bands_Metadata[9:13]))
# Calculating and Displaying
Landsat_7_Bands_Metadata[9:13]
corrplot(cor(Landsat_7_Bands_Metadata[9:13]))
# Calculating and Displaying
Landsat_7_Samples[9:13]
corrplot(cor(Landsat_7_Bands_Metadata[9:13]))
# Calculating and Displaying
Landsat_7_Samples[9:14]
corrplot(cor(Landsat_7_Bands_Metadata[9:14]))
# Calculating and Displaying
x = Landsat_7_Samples[9:14]
corrplot(cor(x))
# Calculating and Displaying
# Step 1: Collect ONLY the values you want to use in the PCA
Landsat_Reflectances = Landsat_7_Samples %>%
select(c(ETM1,
ETM2,
ETM3,
ETM4,
ETM5,
ETM7))
# Step 2: calculate the correlation
cor(Landsat_Reflectances)
# Step 3: Same thing but prettier.
corplot(cor(Landsat_Reflectances))
# Calculating and Displaying
# Step 1: Collect ONLY the values you want to use in the PCA
Landsat_Reflectances = Landsat_7_Samples %>%
select(c(ETM1,
ETM2,
ETM3,
ETM4,
ETM5,
ETM7))
# Step 2: calculate the correlation
cor(Landsat_Reflectances)
# Step 3: Same thing but prettier.
corrplot(cor(Landsat_Reflectances))
# Calculating and Displaying
# Step 1: Collect ONLY the values you want to use in the PCA
Landsat_Reflectances = Landsat_7_Samples %>%
select(c(ETM1,
ETM2,
ETM3,
ETM4,
ETM5,
ETM7))
# Step 2: calculate the correlation
cor(Landsat_Reflectances)
# As above but pretty
corrplot(cor(Landsat_Reflectances))
# As above but pretty
corrplot(corr  = cor(Landsat_Reflectances),    # your correlation matrix
title = "Landsat Correlation Matrix")
# As above but pretty
corrplot(corr  = cor(Landsat_Reflectances), tl.srt = 45,   # your correlation matrix
title = "Landsat Correlation Matrix")
# As above but pretty
corrplot(corr  = cor(Landsat_Reflectances), tl.srt = 90,   # your correlation matrix
title = "Landsat Correlation Matrix")
# As above but pretty
corrplot(corr  = cor(Landsat_Reflectances), tl.srt = 0,   # your correlation matrix
title = "Landsat Correlation Matrix")
# As above but pretty
corrplot(corr  = cor(Landsat_Reflectances), tl.srt = 0,   # your correlation matrix
title = "Landsat Correlation Matrix\n")
# As above but pretty
corrplot(corr  = cor(Landsat_Reflectances),   # your correlation matrix
title = "Landsat Correlation Matrix")
library(package = "tidyverse")  # Tidyverse suite of packages data analysis
library(package = "FactoMineR") # Multivariate Exploratory Data Analysis and Data Mining
library(package = "factoextra") # Extract and Visualize the Results of Multivariate Data Analyses
library(package = "corrplot")   # Visualization of a Correlation Matrix
load(file = url("http://kyrill.ias.sdsmt.edu/wjc/github_math_tools/PCA/Landsat/Landsat_7_Rapid_City_ETM_2001-08-16_1725_Classes.Rdata"))
# Dark Object Subtraction (assuming water target)
Landsat_7_Samples$ETM1 =  Landsat_7_Samples$ETM1 - min( Landsat_7_Samples$ETM1 )
Landsat_7_Samples$ETM2 =  Landsat_7_Samples$ETM2 - min( Landsat_7_Samples$ETM2 )
Landsat_7_Samples$ETM3 =  Landsat_7_Samples$ETM3 - min( Landsat_7_Samples$ETM3 )
Landsat_7_Samples$ETM4 =  Landsat_7_Samples$ETM4 - min( Landsat_7_Samples$ETM4 )
Landsat_7_Samples$ETM5 =  Landsat_7_Samples$ETM5 - min( Landsat_7_Samples$ETM5 )
Landsat_7_Samples$ETM7 =  Landsat_7_Samples$ETM7 - min( Landsat_7_Samples$ETM7 )
# print Dataset
print(Landsat_7_Samples)
# print Dataset
#  (these next three datasets are archived as arrays
#   so we have to turn it into a data frame for pretty
#   plotting!)
print(enframe(Landsat_7_Samples_ColorMap))
# print Band Data
print(enframe(Landsat_7_Bands_Metadata))
# print Time Metadata (as above it's originally an array)
print(enframe(Landsat_7_Time_Metadata))
# print Time Metadata (as above it's originally an array)
print(enframe(Landsat_7_Time_Metadata))
# print Time Metadata (as above it's originally an array)
print(Landsat_7_Time_Metadata)
# Plot Classic Red-NIR Arrowhead
ggplot(data = Landsat_7_Samples) + # create a graphic object
aes(x     = ETM3,                # select variables that will be plotted
y     = ETM4,                # and mapped.
color = Class) +
theme_bw() +                     # simple black and white theme.
coord_fixed() +                           # creates a nice 1:1 proportion in plotting.
ggtitle(label    = "Landsat 7 ETM+ Data",
subtitle = "Rapid City, SD, 2001-08-16 1725 UTC") +
xlab(label = "0.66-μm Reflectance") +     # label your axes!
ylab(label = "0.84-μm Reflectance") +     # ALL of them!
xlim(0, max(Landsat_7_Samples$ETM3,       # here we are making a nice square plot
Landsat_7_Samples$ETM4)) +    # where both axis have the same extent...
ylim(0, max(Landsat_7_Samples$ETM3,       # ... going from 0 to the max values
Landsat_7_Samples$ETM4)) +
scale_color_manual(values = Landsat_7_Samples_ColorMap) + # use our color table from above
geom_point(alpha = 0.5)  # and throw out a scatter point set.
# Calculating and Displaying
# Step 1: Collect ONLY the values you want to use in the PCA
Landsat_Reflectances = Landsat_7_Samples %>%
select(c(ETM1,
ETM2,
ETM3,
ETM4,
ETM5,
ETM7))
# Step 2: calculate the correlation
cor(Landsat_Reflectances)
# As above but pretty
corrplot(corr  = cor(Landsat_Reflectances),   # your correlation matrix
title = "Landsat Correlation Matrix")
# print Dataset
#  (these next three datasets are archived as arrays
#   so we have to turn it into a data frame for pretty
#   plotting!)
print(enframe(Landsat_7_Samples_ColorMap))
# print Dataset
#  (these next three datasets are archived as arrays
#   so we have to turn it into a data frame for pretty
#   plotting!)
print(enframe(Landsat_7_Samples_ColorMap))
# print Band Data
print(enframe(Landsat_7_Bands_Metadata))
library(package = "tidyverse")  # Tidyverse suite of packages data analysis
library(package = "FactoMineR") # Multivariate Exploratory Data Analysis and Data Mining
library(package = "factoextra") # Extract and Visualize the Results of Multivariate Data Analyses
library(package = "corrplot")   # Visualization of a Correlation Matrix
load(file = url("http://kyrill.ias.sdsmt.edu/wjc/github_math_tools/PCA/Landsat/Landsat_7_Rapid_City_ETM_2001-08-16_1725_Classes.Rdata"))
# Dark Object Subtraction (assuming water target)
Landsat_7_Samples$ETM1 =  Landsat_7_Samples$ETM1 - min( Landsat_7_Samples$ETM1 )
Landsat_7_Samples$ETM2 =  Landsat_7_Samples$ETM2 - min( Landsat_7_Samples$ETM2 )
Landsat_7_Samples$ETM3 =  Landsat_7_Samples$ETM3 - min( Landsat_7_Samples$ETM3 )
Landsat_7_Samples$ETM4 =  Landsat_7_Samples$ETM4 - min( Landsat_7_Samples$ETM4 )
Landsat_7_Samples$ETM5 =  Landsat_7_Samples$ETM5 - min( Landsat_7_Samples$ETM5 )
Landsat_7_Samples$ETM7 =  Landsat_7_Samples$ETM7 - min( Landsat_7_Samples$ETM7 )
# print Dataset
print(Landsat_7_Samples)
# print Dataset
#  (these next three datasets are archived as arrays
#   so we have to turn it into a data frame for pretty
#   plotting!)
print(enframe(Landsat_7_Samples_ColorMap))
# print Band Data
print(enframe(Landsat_7_Bands_Metadata))
# print Time Metadata (as above it's originally an array)
print(Landsat_7_Time_Metadata))
print(enframe(Landsat_7_Samples_ColorMap))
enframe(Landsat_7_Samples_ColorMap)
library(package = "tidyverse")  # Tidyverse suite of packages data analysis
library(package = "FactoMineR") # Multivariate Exploratory Data Analysis and Data Mining
library(package = "factoextra") # Extract and Visualize the Results of Multivariate Data Analyses
library(package = "corrplot")   # Visualization of a Correlation Matrix
load(file = url("http://kyrill.ias.sdsmt.edu/wjc/github_math_tools/PCA/Landsat/Landsat_7_Rapid_City_ETM_2001-08-16_1725_Classes.Rdata"))
# Dark Object Subtraction (assuming water target)
Landsat_7_Samples$ETM1 =  Landsat_7_Samples$ETM1 - min( Landsat_7_Samples$ETM1 )
Landsat_7_Samples$ETM2 =  Landsat_7_Samples$ETM2 - min( Landsat_7_Samples$ETM2 )
Landsat_7_Samples$ETM3 =  Landsat_7_Samples$ETM3 - min( Landsat_7_Samples$ETM3 )
Landsat_7_Samples$ETM4 =  Landsat_7_Samples$ETM4 - min( Landsat_7_Samples$ETM4 )
Landsat_7_Samples$ETM5 =  Landsat_7_Samples$ETM5 - min( Landsat_7_Samples$ETM5 )
Landsat_7_Samples$ETM7 =  Landsat_7_Samples$ETM7 - min( Landsat_7_Samples$ETM7 )
# print Dataset
print(Landsat_7_Samples)
enframe(Landsat_7_Samples_ColorMap)
# print Band Data
print(enframe(Landsat_7_Bands_Metadata))
# print Time Metadata (as above it's originally an array)
print(Landsat_7_Time_Metadata)
# Plot Classic Red-NIR Arrowhead
ggplot(data = Landsat_7_Samples) + # create a graphic object
aes(x     = ETM3,                # select variables that will be plotted
y     = ETM4,                # and mapped.
color = Class) +
theme_bw() +                     # simple black and white theme.
coord_fixed() +                           # creates a nice 1:1 proportion in plotting.
ggtitle(label    = "Landsat 7 ETM+ Data",
subtitle = "Rapid City, SD, 2001-08-16 1725 UTC") +
xlab(label = "0.66-μm Reflectance") +     # label your axes!
ylab(label = "0.84-μm Reflectance") +     # ALL of them!
xlim(0, max(Landsat_7_Samples$ETM3,       # here we are making a nice square plot
Landsat_7_Samples$ETM4)) +    # where both axis have the same extent...
ylim(0, max(Landsat_7_Samples$ETM3,       # ... going from 0 to the max values
Landsat_7_Samples$ETM4)) +
scale_color_manual(values = Landsat_7_Samples_ColorMap) + # use our color table from above
geom_point(alpha = 0.5)  # and throw out a scatter point set.
# Calculating and Displaying
# Step 1: Collect ONLY the values you want to use in the PCA
Landsat_Reflectances = Landsat_7_Samples %>%
select(c(ETM1,
ETM2,
ETM3,
ETM4,
ETM5,
ETM7))
# Step 2: calculate the correlation
cor(Landsat_Reflectances)
# As above but pretty
corrplot(corr  = cor(Landsat_Reflectances),   # your correlation matrix
title = "Landsat Correlation Matrix")
