library(package = "tidyverse")
library(package = "lubridate")
library(package = "rlist")
library(package = "ncdf4")
library(package = "ncdf4.helpers")
library(package = "PCICt")
library(package = "reshape2")
# directory/URL root
directory = "/projects/BIG_WEATHER/GENS_ERROR_RT/triangle_archives/"
directory = "http://kyrill.ias.sdsmt.edu:8080/thredds/fileServer/BWW_GENS/CI_STAT/"
time_range = "2015-06-01_00_to_2019-03-31_00"
region = "WRFRAP"
RdataFile = str_c(directory,
"gens_03_ensemble__",
"T2M_MSLP_M10_SPCH2M_ISOHGT_U10_V10_FRICV_GUST",
"__error__",
region,
"__",
time_range,
".RData",
sep = "")
load(file = url(RdataFile))
Time     = unique(CI_Ensemble_Stats$Time)
Fx_Hour  = unique(CI_Ensemble_Stats$Fx_Hour)
Variable = unique(CI_Ensemble_Stats$Variable)
Height   = unique(CI_Ensemble_Stats$Height)
CI_Ensemble_Stats$Month   = month(CI_Ensemble_Stats$Time)
CI_Ensemble_Stats = CI_Ensemble_Stats %>%
mutate(Quarter = case_when(((Month == 12) | (Month == 01) | (Month == 02))
~ "DJF",
((Month == 03) | (Month == 04) | (Month == 05))
~ "MAM",
((Month == 06) | (Month == 07) | (Month == 08))
~ "JJA",
((Month == 09) | (Month == 10) | (Month == 11))
~ "SON") )
CI_Ensemble_Stats$Quarter = factor(x      = CI_Ensemble_Stats$Quarter,
levels = c("DJF", "MAM", "JJA", "SON"))
CI_Ensemble_Stats$Month = factor(x      = format((CI_Ensemble_Stats$Time),"%b"),
levels = c("Jan","Feb","Mar","Apr","May","Jun",
"Jul","Aug","Sep","Oct","Nov","Dec"))
Var     = "T2M"
Varname = "2-m Air Temperature"
Hgt     = 2
Fx      = 24
for (Fx in Fx_Hour[2:length(Fx_Hour)]) {
fx_subset = CI_Ensemble_Stats %>% filter((Variable == Var) &
(Height   == Hgt) &
(Fx_Hour  == Fx)  ) %>%
select(-Quarter)
seasonal_subset = CI_Ensemble_Stats %>% filter((Variable == Var) &
(Height   == Hgt) &
(Fx_Hour  == Fx)  )
myplot = ggplot(data = seasonal_subset) +
aes(x       = Ens_StDev,
y       = RMSE_Ens000,
color   = Quarter) +
facet_wrap(facets = ~ Quarter) +
theme_bw() +
theme(strip.background = element_rect(fill=NA),
) +
labs(title    = str_c(Fx,
"-hr Forecast, CI Seasonal Triangles for ",
Varname,
sep = ""),
subtitle = str_c(region_name,
sep = "")) +
xlab("Ensemble Standard Deviation") +
ylab("Root Mean Squared Error") +
geom_point(data    = fx_subset,
color   = "grey",
alpha   = 0.5) +
scale_colour_manual(values=c("DJF" = "cyan",
"MAM" = "green",
"JJA" = "magenta",
"SON" = "orange"),
guide =FALSE) +
geom_point(data    = seasonal_subset,
alpha   = 0.7)
print(myplot)
}
for (Fx in Fx_Hour[2:length(Fx_Hour)]) {
fx_subset = CI_Ensemble_Stats %>% filter((Variable == Var) &
(Height   == Hgt) &
(Fx_Hour  == Fx)  ) %>%
select(-Month)
seasonal_subset = CI_Ensemble_Stats %>% filter((Variable == Var) &
(Height   == Hgt) &
(Fx_Hour  == Fx)  )
myplot = ggplot(data = seasonal_subset) +
aes(x       = Ens_StDev,
y       = RMSE_Ens000,
color   = Month) +
facet_wrap(facets = ~ Month) +
theme_bw() +
theme(strip.background = element_rect(fill=NA),
legend.position = "none") +
labs(title    = str_c(Fx,
"-hr Forecast, CI Seasonal Triangles for ",
Varname,
sep = ""),
subtitle = str_c(region_name,
sep = "")) +
xlab("Ensemble Standard Deviation") +
ylab("Root Mean Squared Error") +
geom_point(data    = fx_subset,
color   = "grey",
alpha   = 0.5) +
geom_point(data    = seasonal_subset,
alpha   = 0.7)
print(myplot)
}
setwd("~/GitHub/SDMines_CEE_AES_Math_Ed_Resources/Eigenvalues_Eigenvectors_and_Principal_Components/Remote_Sensing_Data_With_R")
library(package = "tidyverse")  # Tidyverse suite of packages data analysis
library(package = "FactoMineR") # Multivariate Exploratory Data Analysis and Data Mining
library(package = "factoextra") # Extract and Visualize the Results of Multivariate Data Analyses
library(package = "corrplot")   # Visualization of a Correlation Matrix
load(file = url("http://kyrill.ias.sdsmt.edu/wjc/github_math_tools/PCA/Landsat/Landsat_7_Rapid_City_ETM_2001-08-16_1725_Classes.Rdata"))
# Dark Object Subtraction (assuming water target)
Landsat_7_Samples$ETM1 =  Landsat_7_Samples$ETM1 - min( Landsat_7_Samples$ETM1 )
Landsat_7_Samples$ETM2 =  Landsat_7_Samples$ETM2 - min( Landsat_7_Samples$ETM2 )
Landsat_7_Samples$ETM3 =  Landsat_7_Samples$ETM3 - min( Landsat_7_Samples$ETM3 )
Landsat_7_Samples$ETM4 =  Landsat_7_Samples$ETM4 - min( Landsat_7_Samples$ETM4 )
Landsat_7_Samples$ETM5 =  Landsat_7_Samples$ETM5 - min( Landsat_7_Samples$ETM5 )
Landsat_7_Samples$ETM7 =  Landsat_7_Samples$ETM7 - min( Landsat_7_Samples$ETM7 )
# print Dataset
print(Landsat_7_Samples)
# enframe(Landsat_7_Samples_ColorMap)
# print Band Data
# enframe(Landsat_7_Bands_Metadata)
# print Time Metadata (as above it's originally an array)
print(Landsat_7_Time_Metadata)
# Plot Classic Red-NIR Arrowhead
ggplot(data = Landsat_7_Samples) + # create a graphic object
aes(x     = ETM3,                # select variables that will be plotted
y     = ETM4,                # and mapped.
color = Class) +
theme_bw() +                     # simple black and white theme.
coord_fixed() +                           # creates a nice 1:1 proportion in plotting.
ggtitle(label    = "Landsat 7 ETM+ Data",
subtitle = "Rapid City, SD, 2001-08-16 1725 UTC") +
xlab(label = "0.66-μm Reflectance") +     # label your axes!
ylab(label = "0.84-μm Reflectance") +     # ALL of them!
xlim(0, max(Landsat_7_Samples$ETM3,       # here we are making a nice square plot
Landsat_7_Samples$ETM4)) +    # where both axis have the same extent...
ylim(0, max(Landsat_7_Samples$ETM3,       # ... going from 0 to the max values
Landsat_7_Samples$ETM4)) +
scale_color_manual(values = Landsat_7_Samples_ColorMap) + # use our color table from above
geom_point(alpha = 0.5)  # and throw out a scatter point set.
# Calculating and Displaying
# Step 1: Collect ONLY the values you want to use in the PCA
Landsat_Reflectances = Landsat_7_Samples %>%
select(c(ETM1,
ETM2,
ETM3,
ETM4,
ETM5,
ETM7))
# Step 2: calculate the covariance matrix
cov(Landsat_Reflectances)
# Step 2: calculate the correlation matrix
cor(Landsat_Reflectances)
# As above but pretty
corrplot(corr   = cor(Landsat_Reflectances),   # your correlation matrix
method = "ellipse")
# Penn State
x = read.table(file   = url(description = "https://astrostatistics.psu.edu/su09/lecturenotes/marks.dat"),
header = TRUE,
sep    = "")
colnames(x) = c("x1","x2") # making it very simple and generic here.
print(x)
# Plot X1 v X2
ggplot(data = x) + # create a graphic object
aes(x     = x1,                # select variables that will be plotted
y     = x2) +
theme_bw() +                     # simple black and white theme.
coord_fixed() +                           # creates a nice 1:1 proportion in plotting.
ggtitle(label = "Penn State Sample Set") +
xlim(min(x$x1,
x$x2),
max(x$x1,
x$x2)) +
ylim(min(x$x1,
x$x2),
max(x$x1,
x$x2)) +
geom_point(alpha = 0.5)  # and throw out a scatter point set.
cor(x)
corrplot(corr   = cor(x),
method = "ellipse")
cov(x)
# Prepare Data for PCA Analysis
# Step 1: Collect ONLY the values you want to use in the PCA
Landsat_Reflectances = Landsat_7_Samples %>%
select(c(ETM1,
ETM2,
ETM3,
ETM4,
ETM5,
ETM7))
# Chose/Createa vector for identifying *each* Pixel.
#  Since the values need to be unique I am merging
#     my class label with the id number for the pixels
#     in each class
#
# If you want to group pixels you should keep
#    a second vector corresponding to the groups
#    for later.  For us this is the Landsat_7_Samples$Class
Landsat_Reflectances$rowname = str_c(Landsat_7_Samples$Class,
":",
sprintf("%03d",                 # C-style format code
Landsat_7_Samples$ID), # value to be parsed
sep = "")
# Convert "rowname" column into a seprate value coordinate for each row.
#   this removes the variable from the data frame and places uses it to
#   "number" each row
Landsat_Reflectances = Landsat_Reflectances %>%
column_to_rownames(var = "rowname")
# now we can inspect our work
print(Landsat_Reflectances)
Landsat_PCA = PCA(X          = Landsat_Reflectances, # Original Data Frame
scale.unit = TRUE,                 # Scale to 1 SD
graph      = FALSE)                # Don't Graph Because the one below is prettier\
fviz_pca_biplot(X            = Landsat_PCA,                # PCA Data Frame
title        = str_c("PCA Analysis: ",     # Plot Label)
"Landsat 7 ETM+, ",
"Rapid City, SD, ",
"2001-08-16 1725 UTC",
sep = ""),
geom.ind     = "point",                    # show points only (but not "text")
legend.title = "Land Use",                 # Label for Class Legend
col.ind      = Landsat_7_Samples$Class,    # Class Values for Data Point
palette      = Landsat_7_Samples_ColorMap, # Color Palette for Data Points
alpha.ind    = 0.5,                        # Color Transparency for Data Points
col.var      = "black",                    # PCA->Real Vector Color
addEllipses  = TRUE)                       # Add Concentration ellipses
library(package = "tidyverse")  # Tidyverse suite of packages data analysis
library(package = "FactoMineR") # Multivariate Exploratory Data Analysis and Data Mining
library(package = "factoextra") # Extract and Visualize the Results of Multivariate Data Analyses
library(package = "corrplot")   # Visualization of a Correlation Matrix
load(file = url("http://kyrill.ias.sdsmt.edu/wjc/github_math_tools/PCA/Landsat/Landsat_7_Rapid_City_ETM_2001-08-16_1725_Classes.Rdata"))
# Dark Object Subtraction (assuming water target)
Landsat_7_Samples$ETM1 =  Landsat_7_Samples$ETM1 - min( Landsat_7_Samples$ETM1 )
Landsat_7_Samples$ETM2 =  Landsat_7_Samples$ETM2 - min( Landsat_7_Samples$ETM2 )
Landsat_7_Samples$ETM3 =  Landsat_7_Samples$ETM3 - min( Landsat_7_Samples$ETM3 )
Landsat_7_Samples$ETM4 =  Landsat_7_Samples$ETM4 - min( Landsat_7_Samples$ETM4 )
Landsat_7_Samples$ETM5 =  Landsat_7_Samples$ETM5 - min( Landsat_7_Samples$ETM5 )
Landsat_7_Samples$ETM7 =  Landsat_7_Samples$ETM7 - min( Landsat_7_Samples$ETM7 )
# print Dataset
print(Landsat_7_Samples)
# enframe(Landsat_7_Samples_ColorMap)
# print Band Data
# enframe(Landsat_7_Bands_Metadata)
# print Time Metadata (as above it's originally an array)
print(Landsat_7_Time_Metadata)
# Plot Classic Red-NIR Arrowhead
ggplot(data = Landsat_7_Samples) + # create a graphic object
aes(x     = ETM3,                # select variables that will be plotted
y     = ETM4,                # and mapped.
color = Class) +
theme_bw() +                     # simple black and white theme.
coord_fixed() +                           # creates a nice 1:1 proportion in plotting.
ggtitle(label    = "Landsat 7 ETM+ Data",
subtitle = "Rapid City, SD, 2001-08-16 1725 UTC") +
xlab(label = "0.66-μm Reflectance") +     # label your axes!
ylab(label = "0.84-μm Reflectance") +     # ALL of them!
xlim(0, max(Landsat_7_Samples$ETM3,       # here we are making a nice square plot
Landsat_7_Samples$ETM4)) +    # where both axis have the same extent...
ylim(0, max(Landsat_7_Samples$ETM3,       # ... going from 0 to the max values
Landsat_7_Samples$ETM4)) +
scale_color_manual(values = Landsat_7_Samples_ColorMap) + # use our color table from above
geom_point(alpha = 0.5)  # and throw out a scatter point set.
# Calculating and Displaying
# Step 1: Collect ONLY the values you want to use in the PCA
Landsat_Reflectances = Landsat_7_Samples %>%
select(c(ETM1,
ETM2,
ETM3,
ETM4,
ETM5,
ETM7))
# Step 2: calculate the covariance matrix
cov(Landsat_Reflectances)
# Step 2: calculate the correlation matrix
cor(Landsat_Reflectances)
# As above but pretty
corrplot(corr   = cor(Landsat_Reflectances),   # your correlation matrix
method = "ellipse")
# Penn State
x = read.table(file   = url(description = "https://astrostatistics.psu.edu/su09/lecturenotes/marks.dat"),
header = TRUE,
sep    = "")
colnames(x) = c("x1","x2") # making it very simple and generic here.
print(x)
# Plot X1 v X2
ggplot(data = x) + # create a graphic object
aes(x     = x1,                # select variables that will be plotted
y     = x2) +
theme_bw() +                     # simple black and white theme.
coord_fixed() +                           # creates a nice 1:1 proportion in plotting.
ggtitle(label = "Penn State Sample Set") +
xlim(min(x$x1,
x$x2),
max(x$x1,
x$x2)) +
ylim(min(x$x1,
x$x2),
max(x$x1,
x$x2)) +
geom_point(alpha = 0.5)  # and throw out a scatter point set.
cor(x)
corrplot(corr   = cor(x),
method = "ellipse")
cov(x)
# Prepare Data for PCA Analysis
# Step 1: Collect ONLY the values you want to use in the PCA
Landsat_Reflectances = Landsat_7_Samples %>%
select(c(ETM1,
ETM2,
ETM3,
ETM4,
ETM5,
ETM7))
# Chose/Createa vector for identifying *each* Pixel.
#  Since the values need to be unique I am merging
#     my class label with the id number for the pixels
#     in each class
#
# If you want to group pixels you should keep
#    a second vector corresponding to the groups
#    for later.  For us this is the Landsat_7_Samples$Class
Landsat_Reflectances$rowname = str_c(Landsat_7_Samples$Class,
":",
sprintf("%03d",                 # C-style format code
Landsat_7_Samples$ID), # value to be parsed
sep = "")
# Convert "rowname" column into a seprate value coordinate for each row.
#   this removes the variable from the data frame and places uses it to
#   "number" each row
Landsat_Reflectances = Landsat_Reflectances %>%
column_to_rownames(var = "rowname")
# now we can inspect our work
print(Landsat_Reflectances)
Landsat_PCA = PCA(X          = Landsat_Reflectances, # Original Data Frame
scale.unit = TRUE,                 # Scale to 1 SD
graph      = FALSE)                # Don't Graph Because the one below is prettier\
fviz_pca_biplot(X            = Landsat_PCA,                # PCA Data Frame
title        = str_c("PCA Analysis: ",     # Plot Label)
"Landsat 7 ETM+, ",
"Rapid City, SD, ",
"2001-08-16 1725 UTC",
sep = ""),
geom.ind     = "point",                    # show points only (but not "text")
legend.title = "Land Use",                 # Label for Class Legend
col.ind      = Landsat_7_Samples$Class,    # Class Values for Data Point
palette      = Landsat_7_Samples_ColorMap, # Color Palette for Data Points
alpha.ind    = 0.5,                        # Color Transparency for Data Points
col.var      = "black",                    # PCA->Real Vector Color
addEllipses  = TRUE)                       # Add Concentration ellipses
# Plot X1 v X2
ggplot(data = x) + # create a graphic object
aes(x     = x1,                # select variables that will be plotted
y     = x2) +
theme_bw() +                     # simple black and white theme.
coord_fixed() +                           # creates a nice 1:1 proportion in plotting.
ggtitle(label = "Penn State Sample Set") +
xlim(min(x$x1,
x$x2),
max(x$x1,
x$x2)) +
ylim(min(x$x1,
x$x2),
max(x$x1,
x$x2)) +
geom_point(alpha = 0.5,     # and throw out a scatter point set.
color = "red")
cov(x)
I= c(c(1,0),c(0,1))
I
remove(I)
eigenx= eigen(cov(x))
print(eigenx)
eigenx * inv(eigenx)
eigenx * invert(eigenx)
eigenx * invese(eigenx)
library(package = "tidyverse")  # Tidyverse suite of packages data analysis
library(package = "FactoMineR") # Multivariate Exploratory Data Analysis and Data Mining
library(package = "factoextra") # Extract and Visualize the Results of Multivariate Data Analyses
library(package = "corrplot")   # Visualization of a Correlation Matrix
load(file = url("http://kyrill.ias.sdsmt.edu/wjc/github_math_tools/PCA/Landsat/Landsat_7_Rapid_City_ETM_2001-08-16_1725_Classes.Rdata"))
# Dark Object Subtraction (assuming water target)
Landsat_7_Samples$ETM1 =  Landsat_7_Samples$ETM1 - min( Landsat_7_Samples$ETM1 )
Landsat_7_Samples$ETM2 =  Landsat_7_Samples$ETM2 - min( Landsat_7_Samples$ETM2 )
Landsat_7_Samples$ETM3 =  Landsat_7_Samples$ETM3 - min( Landsat_7_Samples$ETM3 )
Landsat_7_Samples$ETM4 =  Landsat_7_Samples$ETM4 - min( Landsat_7_Samples$ETM4 )
Landsat_7_Samples$ETM5 =  Landsat_7_Samples$ETM5 - min( Landsat_7_Samples$ETM5 )
Landsat_7_Samples$ETM7 =  Landsat_7_Samples$ETM7 - min( Landsat_7_Samples$ETM7 )
# print Dataset
print(Landsat_7_Samples)
# enframe(Landsat_7_Samples_ColorMap)
# print Band Data
# enframe(Landsat_7_Bands_Metadata)
# print Time Metadata (as above it's originally an array)
print(Landsat_7_Time_Metadata)
# Plot Classic Red-NIR Arrowhead
ggplot(data = Landsat_7_Samples) + # create a graphic object
aes(x     = ETM3,                # select variables that will be plotted
y     = ETM4,                # and mapped.
color = Class) +
theme_bw() +                     # simple black and white theme.
coord_fixed() +                           # creates a nice 1:1 proportion in plotting.
ggtitle(label    = "Landsat 7 ETM+ Data",
subtitle = "Rapid City, SD, 2001-08-16 1725 UTC") +
xlab(label = "0.66-μm Reflectance") +     # label your axes!
ylab(label = "0.84-μm Reflectance") +     # ALL of them!
xlim(0, max(Landsat_7_Samples$ETM3,       # here we are making a nice square plot
Landsat_7_Samples$ETM4)) +    # where both axis have the same extent...
ylim(0, max(Landsat_7_Samples$ETM3,       # ... going from 0 to the max values
Landsat_7_Samples$ETM4)) +
scale_color_manual(values = Landsat_7_Samples_ColorMap) + # use our color table from above
geom_point(alpha = 0.5)  # and throw out a scatter point set.
# Calculating and Displaying
# Step 1: Collect ONLY the values you want to use in the PCA
Landsat_Reflectances = Landsat_7_Samples %>%
select(c(ETM1,
ETM2,
ETM3,
ETM4,
ETM5,
ETM7))
# Step 2: calculate the covariance matrix
cov(Landsat_Reflectances)
# Step 2: calculate the correlation matrix
cor(Landsat_Reflectances)
# As above but pretty
corrplot(corr   = cor(Landsat_Reflectances),   # your correlation matrix
method = "ellipse")
# Penn State
x = read.table(file   = url(description = "https://astrostatistics.psu.edu/su09/lecturenotes/marks.dat"),
header = TRUE,
sep    = "")
colnames(x) = c("x1","x2") # making it very simple and generic here.
print(x)
# Plot X1 v X2
ggplot(data = x) + # create a graphic object
aes(x     = x1,                # select variables that will be plotted
y     = x2) +
theme_bw() +                     # simple black and white theme.
coord_fixed() +                           # creates a nice 1:1 proportion in plotting.
ggtitle(label = "Penn State Sample Set") +
xlim(min(x$x1,
x$x2),
max(x$x1,
x$x2)) +
ylim(min(x$x1,
x$x2),
max(x$x1,
x$x2)) +
geom_point(alpha = 0.5,     # and throw out a scatter point set.
color = "red")
cor(x)
corrplot(corr   = cor(x),
method = "ellipse")
cov(x)
# In R this is done simply by the eigen() function.
eigen_of_x = eigen(x = cov(x))
print(eigen_of_x)
# Prepare Data for PCA Analysis
# Step 1: Collect ONLY the values you want to use in the PCA
Landsat_Reflectances = Landsat_7_Samples %>%
select(c(ETM1,
ETM2,
ETM3,
ETM4,
ETM5,
ETM7))
# Chose/Createa vector for identifying *each* Pixel.
#  Since the values need to be unique I am merging
#     my class label with the id number for the pixels
#     in each class
#
# If you want to group pixels you should keep
#    a second vector corresponding to the groups
#    for later.  For us this is the Landsat_7_Samples$Class
Landsat_Reflectances$rowname = str_c(Landsat_7_Samples$Class,
":",
sprintf("%03d",                 # C-style format code
Landsat_7_Samples$ID), # value to be parsed
sep = "")
# Convert "rowname" column into a seprate value coordinate for each row.
#   this removes the variable from the data frame and places uses it to
#   "number" each row
Landsat_Reflectances = Landsat_Reflectances %>%
column_to_rownames(var = "rowname")
# now we can inspect our work
print(Landsat_Reflectances)
Landsat_PCA = PCA(X          = Landsat_Reflectances, # Original Data Frame
scale.unit = TRUE,                 # Scale to 1 SD
graph      = FALSE)                # Don't Graph Because the one below is prettier\
fviz_pca_biplot(X            = Landsat_PCA,                # PCA Data Frame
title        = str_c("PCA Analysis: ",     # Plot Label)
"Landsat 7 ETM+, ",
"Rapid City, SD, ",
"2001-08-16 1725 UTC",
sep = ""),
geom.ind     = "point",                    # show points only (but not "text")
legend.title = "Land Use",                 # Label for Class Legend
col.ind      = Landsat_7_Samples$Class,    # Class Values for Data Point
palette      = Landsat_7_Samples_ColorMap, # Color Palette for Data Points
alpha.ind    = 0.5,                        # Color Transparency for Data Points
col.var      = "black",                    # PCA->Real Vector Color
addEllipses  = TRUE)                       # Add Concentration ellipses
